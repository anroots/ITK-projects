                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Mon Oct 24 10:06:17 2011
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _init
                             14 	.globl _CY
                             15 	.globl _AC
                             16 	.globl _F0
                             17 	.globl _RS1
                             18 	.globl _RS0
                             19 	.globl _OV
                             20 	.globl _F1
                             21 	.globl _P
                             22 	.globl _PS
                             23 	.globl _PT1
                             24 	.globl _PX1
                             25 	.globl _PT0
                             26 	.globl _PX0
                             27 	.globl _RD
                             28 	.globl _WR
                             29 	.globl _T1
                             30 	.globl _T0
                             31 	.globl _INT1
                             32 	.globl _INT0
                             33 	.globl _TXD
                             34 	.globl _RXD
                             35 	.globl _P3_7
                             36 	.globl _P3_6
                             37 	.globl _P3_5
                             38 	.globl _P3_4
                             39 	.globl _P3_3
                             40 	.globl _P3_2
                             41 	.globl _P3_1
                             42 	.globl _P3_0
                             43 	.globl _EA
                             44 	.globl _ES
                             45 	.globl _ET1
                             46 	.globl _EX1
                             47 	.globl _ET0
                             48 	.globl _EX0
                             49 	.globl _P2_7
                             50 	.globl _P2_6
                             51 	.globl _P2_5
                             52 	.globl _P2_4
                             53 	.globl _P2_3
                             54 	.globl _P2_2
                             55 	.globl _P2_1
                             56 	.globl _P2_0
                             57 	.globl _SM0
                             58 	.globl _SM1
                             59 	.globl _SM2
                             60 	.globl _REN
                             61 	.globl _TB8
                             62 	.globl _RB8
                             63 	.globl _TI
                             64 	.globl _RI
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TF1
                             74 	.globl _TR1
                             75 	.globl _TF0
                             76 	.globl _TR0
                             77 	.globl _IE1
                             78 	.globl _IT1
                             79 	.globl _IE0
                             80 	.globl _IT0
                             81 	.globl _P0_7
                             82 	.globl _P0_6
                             83 	.globl _P0_5
                             84 	.globl _P0_4
                             85 	.globl _P0_3
                             86 	.globl _P0_2
                             87 	.globl _P0_1
                             88 	.globl _P0_0
                             89 	.globl _B
                             90 	.globl _ACC
                             91 	.globl _PSW
                             92 	.globl _IP
                             93 	.globl _P3
                             94 	.globl _IE
                             95 	.globl _P2
                             96 	.globl _SBUF
                             97 	.globl _SCON
                             98 	.globl _P1
                             99 	.globl _TH1
                            100 	.globl _TH0
                            101 	.globl _TL1
                            102 	.globl _TL0
                            103 	.globl _TMOD
                            104 	.globl _TCON
                            105 	.globl _PCON
                            106 	.globl _DPH
                            107 	.globl _DPL
                            108 	.globl _SP
                            109 	.globl _P0
                            110 	.globl _cycle_delay
                            111 	.globl _OUT
                            112 	.globl _FREE_SLOTS
                            113 ;--------------------------------------------------------
                            114 ; special function registers
                            115 ;--------------------------------------------------------
                            116 	.area RSEG    (DATA)
                    0080    117 G$P0$0$0 == 0x0080
                    0080    118 _P0	=	0x0080
                    0081    119 G$SP$0$0 == 0x0081
                    0081    120 _SP	=	0x0081
                    0082    121 G$DPL$0$0 == 0x0082
                    0082    122 _DPL	=	0x0082
                    0083    123 G$DPH$0$0 == 0x0083
                    0083    124 _DPH	=	0x0083
                    0087    125 G$PCON$0$0 == 0x0087
                    0087    126 _PCON	=	0x0087
                    0088    127 G$TCON$0$0 == 0x0088
                    0088    128 _TCON	=	0x0088
                    0089    129 G$TMOD$0$0 == 0x0089
                    0089    130 _TMOD	=	0x0089
                    008A    131 G$TL0$0$0 == 0x008a
                    008A    132 _TL0	=	0x008a
                    008B    133 G$TL1$0$0 == 0x008b
                    008B    134 _TL1	=	0x008b
                    008C    135 G$TH0$0$0 == 0x008c
                    008C    136 _TH0	=	0x008c
                    008D    137 G$TH1$0$0 == 0x008d
                    008D    138 _TH1	=	0x008d
                    0090    139 G$P1$0$0 == 0x0090
                    0090    140 _P1	=	0x0090
                    0098    141 G$SCON$0$0 == 0x0098
                    0098    142 _SCON	=	0x0098
                    0099    143 G$SBUF$0$0 == 0x0099
                    0099    144 _SBUF	=	0x0099
                    00A0    145 G$P2$0$0 == 0x00a0
                    00A0    146 _P2	=	0x00a0
                    00A8    147 G$IE$0$0 == 0x00a8
                    00A8    148 _IE	=	0x00a8
                    00B0    149 G$P3$0$0 == 0x00b0
                    00B0    150 _P3	=	0x00b0
                    00B8    151 G$IP$0$0 == 0x00b8
                    00B8    152 _IP	=	0x00b8
                    00D0    153 G$PSW$0$0 == 0x00d0
                    00D0    154 _PSW	=	0x00d0
                    00E0    155 G$ACC$0$0 == 0x00e0
                    00E0    156 _ACC	=	0x00e0
                    00F0    157 G$B$0$0 == 0x00f0
                    00F0    158 _B	=	0x00f0
                            159 ;--------------------------------------------------------
                            160 ; special function bits
                            161 ;--------------------------------------------------------
                            162 	.area RSEG    (DATA)
                    0080    163 G$P0_0$0$0 == 0x0080
                    0080    164 _P0_0	=	0x0080
                    0081    165 G$P0_1$0$0 == 0x0081
                    0081    166 _P0_1	=	0x0081
                    0082    167 G$P0_2$0$0 == 0x0082
                    0082    168 _P0_2	=	0x0082
                    0083    169 G$P0_3$0$0 == 0x0083
                    0083    170 _P0_3	=	0x0083
                    0084    171 G$P0_4$0$0 == 0x0084
                    0084    172 _P0_4	=	0x0084
                    0085    173 G$P0_5$0$0 == 0x0085
                    0085    174 _P0_5	=	0x0085
                    0086    175 G$P0_6$0$0 == 0x0086
                    0086    176 _P0_6	=	0x0086
                    0087    177 G$P0_7$0$0 == 0x0087
                    0087    178 _P0_7	=	0x0087
                    0088    179 G$IT0$0$0 == 0x0088
                    0088    180 _IT0	=	0x0088
                    0089    181 G$IE0$0$0 == 0x0089
                    0089    182 _IE0	=	0x0089
                    008A    183 G$IT1$0$0 == 0x008a
                    008A    184 _IT1	=	0x008a
                    008B    185 G$IE1$0$0 == 0x008b
                    008B    186 _IE1	=	0x008b
                    008C    187 G$TR0$0$0 == 0x008c
                    008C    188 _TR0	=	0x008c
                    008D    189 G$TF0$0$0 == 0x008d
                    008D    190 _TF0	=	0x008d
                    008E    191 G$TR1$0$0 == 0x008e
                    008E    192 _TR1	=	0x008e
                    008F    193 G$TF1$0$0 == 0x008f
                    008F    194 _TF1	=	0x008f
                    0090    195 G$P1_0$0$0 == 0x0090
                    0090    196 _P1_0	=	0x0090
                    0091    197 G$P1_1$0$0 == 0x0091
                    0091    198 _P1_1	=	0x0091
                    0092    199 G$P1_2$0$0 == 0x0092
                    0092    200 _P1_2	=	0x0092
                    0093    201 G$P1_3$0$0 == 0x0093
                    0093    202 _P1_3	=	0x0093
                    0094    203 G$P1_4$0$0 == 0x0094
                    0094    204 _P1_4	=	0x0094
                    0095    205 G$P1_5$0$0 == 0x0095
                    0095    206 _P1_5	=	0x0095
                    0096    207 G$P1_6$0$0 == 0x0096
                    0096    208 _P1_6	=	0x0096
                    0097    209 G$P1_7$0$0 == 0x0097
                    0097    210 _P1_7	=	0x0097
                    0098    211 G$RI$0$0 == 0x0098
                    0098    212 _RI	=	0x0098
                    0099    213 G$TI$0$0 == 0x0099
                    0099    214 _TI	=	0x0099
                    009A    215 G$RB8$0$0 == 0x009a
                    009A    216 _RB8	=	0x009a
                    009B    217 G$TB8$0$0 == 0x009b
                    009B    218 _TB8	=	0x009b
                    009C    219 G$REN$0$0 == 0x009c
                    009C    220 _REN	=	0x009c
                    009D    221 G$SM2$0$0 == 0x009d
                    009D    222 _SM2	=	0x009d
                    009E    223 G$SM1$0$0 == 0x009e
                    009E    224 _SM1	=	0x009e
                    009F    225 G$SM0$0$0 == 0x009f
                    009F    226 _SM0	=	0x009f
                    00A0    227 G$P2_0$0$0 == 0x00a0
                    00A0    228 _P2_0	=	0x00a0
                    00A1    229 G$P2_1$0$0 == 0x00a1
                    00A1    230 _P2_1	=	0x00a1
                    00A2    231 G$P2_2$0$0 == 0x00a2
                    00A2    232 _P2_2	=	0x00a2
                    00A3    233 G$P2_3$0$0 == 0x00a3
                    00A3    234 _P2_3	=	0x00a3
                    00A4    235 G$P2_4$0$0 == 0x00a4
                    00A4    236 _P2_4	=	0x00a4
                    00A5    237 G$P2_5$0$0 == 0x00a5
                    00A5    238 _P2_5	=	0x00a5
                    00A6    239 G$P2_6$0$0 == 0x00a6
                    00A6    240 _P2_6	=	0x00a6
                    00A7    241 G$P2_7$0$0 == 0x00a7
                    00A7    242 _P2_7	=	0x00a7
                    00A8    243 G$EX0$0$0 == 0x00a8
                    00A8    244 _EX0	=	0x00a8
                    00A9    245 G$ET0$0$0 == 0x00a9
                    00A9    246 _ET0	=	0x00a9
                    00AA    247 G$EX1$0$0 == 0x00aa
                    00AA    248 _EX1	=	0x00aa
                    00AB    249 G$ET1$0$0 == 0x00ab
                    00AB    250 _ET1	=	0x00ab
                    00AC    251 G$ES$0$0 == 0x00ac
                    00AC    252 _ES	=	0x00ac
                    00AF    253 G$EA$0$0 == 0x00af
                    00AF    254 _EA	=	0x00af
                    00B0    255 G$P3_0$0$0 == 0x00b0
                    00B0    256 _P3_0	=	0x00b0
                    00B1    257 G$P3_1$0$0 == 0x00b1
                    00B1    258 _P3_1	=	0x00b1
                    00B2    259 G$P3_2$0$0 == 0x00b2
                    00B2    260 _P3_2	=	0x00b2
                    00B3    261 G$P3_3$0$0 == 0x00b3
                    00B3    262 _P3_3	=	0x00b3
                    00B4    263 G$P3_4$0$0 == 0x00b4
                    00B4    264 _P3_4	=	0x00b4
                    00B5    265 G$P3_5$0$0 == 0x00b5
                    00B5    266 _P3_5	=	0x00b5
                    00B6    267 G$P3_6$0$0 == 0x00b6
                    00B6    268 _P3_6	=	0x00b6
                    00B7    269 G$P3_7$0$0 == 0x00b7
                    00B7    270 _P3_7	=	0x00b7
                    00B0    271 G$RXD$0$0 == 0x00b0
                    00B0    272 _RXD	=	0x00b0
                    00B1    273 G$TXD$0$0 == 0x00b1
                    00B1    274 _TXD	=	0x00b1
                    00B2    275 G$INT0$0$0 == 0x00b2
                    00B2    276 _INT0	=	0x00b2
                    00B3    277 G$INT1$0$0 == 0x00b3
                    00B3    278 _INT1	=	0x00b3
                    00B4    279 G$T0$0$0 == 0x00b4
                    00B4    280 _T0	=	0x00b4
                    00B5    281 G$T1$0$0 == 0x00b5
                    00B5    282 _T1	=	0x00b5
                    00B6    283 G$WR$0$0 == 0x00b6
                    00B6    284 _WR	=	0x00b6
                    00B7    285 G$RD$0$0 == 0x00b7
                    00B7    286 _RD	=	0x00b7
                    00B8    287 G$PX0$0$0 == 0x00b8
                    00B8    288 _PX0	=	0x00b8
                    00B9    289 G$PT0$0$0 == 0x00b9
                    00B9    290 _PT0	=	0x00b9
                    00BA    291 G$PX1$0$0 == 0x00ba
                    00BA    292 _PX1	=	0x00ba
                    00BB    293 G$PT1$0$0 == 0x00bb
                    00BB    294 _PT1	=	0x00bb
                    00BC    295 G$PS$0$0 == 0x00bc
                    00BC    296 _PS	=	0x00bc
                    00D0    297 G$P$0$0 == 0x00d0
                    00D0    298 _P	=	0x00d0
                    00D1    299 G$F1$0$0 == 0x00d1
                    00D1    300 _F1	=	0x00d1
                    00D2    301 G$OV$0$0 == 0x00d2
                    00D2    302 _OV	=	0x00d2
                    00D3    303 G$RS0$0$0 == 0x00d3
                    00D3    304 _RS0	=	0x00d3
                    00D4    305 G$RS1$0$0 == 0x00d4
                    00D4    306 _RS1	=	0x00d4
                    00D5    307 G$F0$0$0 == 0x00d5
                    00D5    308 _F0	=	0x00d5
                    00D6    309 G$AC$0$0 == 0x00d6
                    00D6    310 _AC	=	0x00d6
                    00D7    311 G$CY$0$0 == 0x00d7
                    00D7    312 _CY	=	0x00d7
                            313 ;--------------------------------------------------------
                            314 ; overlayable register banks
                            315 ;--------------------------------------------------------
                            316 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     317 	.ds 8
                            318 ;--------------------------------------------------------
                            319 ; internal ram data
                            320 ;--------------------------------------------------------
                            321 	.area DSEG    (DATA)
                    0000    322 G$FREE_SLOTS$0$0==.
   0000                     323 _FREE_SLOTS::
   0000                     324 	.ds 1
                    0001    325 G$OUT$0$0==.
   0001                     326 _OUT::
   0001                     327 	.ds 10
                    000B    328 G$cycle_delay$0$0==.
   000B                     329 _cycle_delay::
   000B                     330 	.ds 2
                            331 ;--------------------------------------------------------
                            332 ; overlayable items in internal ram 
                            333 ;--------------------------------------------------------
                            334 	.area OSEG    (OVR,DATA)
                            335 ;--------------------------------------------------------
                            336 ; Stack segment in internal ram 
                            337 ;--------------------------------------------------------
                            338 	.area	SSEG	(DATA)
   0000                     339 __start__stack:
   0000                     340 	.ds	1
                            341 
                            342 ;--------------------------------------------------------
                            343 ; indirectly addressable internal ram data
                            344 ;--------------------------------------------------------
                            345 	.area ISEG    (DATA)
                            346 ;--------------------------------------------------------
                            347 ; absolute internal ram data
                            348 ;--------------------------------------------------------
                            349 	.area IABS    (ABS,DATA)
                            350 	.area IABS    (ABS,DATA)
                            351 ;--------------------------------------------------------
                            352 ; bit data
                            353 ;--------------------------------------------------------
                            354 	.area BSEG    (BIT)
                            355 ;--------------------------------------------------------
                            356 ; paged external ram data
                            357 ;--------------------------------------------------------
                            358 	.area PSEG    (PAG,XDATA)
                            359 ;--------------------------------------------------------
                            360 ; external ram data
                            361 ;--------------------------------------------------------
                            362 	.area XSEG    (XDATA)
                            363 ;--------------------------------------------------------
                            364 ; absolute external ram data
                            365 ;--------------------------------------------------------
                            366 	.area XABS    (ABS,XDATA)
                            367 ;--------------------------------------------------------
                            368 ; external initialized ram data
                            369 ;--------------------------------------------------------
                            370 	.area XISEG   (XDATA)
                            371 	.area HOME    (CODE)
                            372 	.area GSINIT0 (CODE)
                            373 	.area GSINIT1 (CODE)
                            374 	.area GSINIT2 (CODE)
                            375 	.area GSINIT3 (CODE)
                            376 	.area GSINIT4 (CODE)
                            377 	.area GSINIT5 (CODE)
                            378 	.area GSINIT  (CODE)
                            379 	.area GSFINAL (CODE)
                            380 	.area CSEG    (CODE)
                            381 ;--------------------------------------------------------
                            382 ; interrupt vector 
                            383 ;--------------------------------------------------------
                            384 	.area HOME    (CODE)
   0000                     385 __interrupt_vect:
   0000 02s00r00            386 	ljmp	__sdcc_gsinit_startup
                            387 ;--------------------------------------------------------
                            388 ; global & static initialisations
                            389 ;--------------------------------------------------------
                            390 	.area HOME    (CODE)
                            391 	.area GSINIT  (CODE)
                            392 	.area GSFINAL (CODE)
                            393 	.area GSINIT  (CODE)
                            394 	.globl __sdcc_gsinit_startup
                            395 	.globl __sdcc_program_startup
                            396 	.globl __start__stack
                            397 	.globl __mcs51_genXINIT
                            398 	.globl __mcs51_genXRAMCLEAR
                            399 	.globl __mcs51_genRAMCLEAR
                    0000    400 	G$main$0$0 ==.
                    0000    401 	C$main.c$28$1$1 ==.
                            402 ;	main.c:28: unsigned char OUT [] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99,
   0000 75*01 C0            403 	mov	_OUT,#0xC0
   0003 75*02 F9            404 	mov	(_OUT + 0x0001),#0xF9
   0006 75*03 A4            405 	mov	(_OUT + 0x0002),#0xA4
   0009 75*04 B0            406 	mov	(_OUT + 0x0003),#0xB0
   000C 75*05 99            407 	mov	(_OUT + 0x0004),#0x99
   000F 75*06 92            408 	mov	(_OUT + 0x0005),#0x92
   0012 75*07 82            409 	mov	(_OUT + 0x0006),#0x82
   0015 75*08 F0            410 	mov	(_OUT + 0x0007),#0xF0
   0018 75*09 80            411 	mov	(_OUT + 0x0008),#0x80
   001B 75*0A 90            412 	mov	(_OUT + 0x0009),#0x90
                            413 	.area GSFINAL (CODE)
   0000 02s00r03            414 	ljmp	__sdcc_program_startup
                            415 ;--------------------------------------------------------
                            416 ; Home
                            417 ;--------------------------------------------------------
                            418 	.area HOME    (CODE)
                            419 	.area HOME    (CODE)
   0003                     420 __sdcc_program_startup:
   0003 12s00r0B            421 	lcall	_main
                            422 ;	return from main will lock up
   0006 80 FE               423 	sjmp .
                            424 ;--------------------------------------------------------
                            425 ; code
                            426 ;--------------------------------------------------------
                            427 	.area CSEG    (CODE)
                            428 ;------------------------------------------------------------
                            429 ;Allocation info for local variables in function 'init'
                            430 ;------------------------------------------------------------
                            431 ;------------------------------------------------------------
                    0000    432 	G$init$0$0 ==.
                    0000    433 	C$main.c$35$0$0 ==.
                            434 ;	main.c:35: void init(void) {
                            435 ;	-----------------------------------------
                            436 ;	 function init
                            437 ;	-----------------------------------------
   0000                     438 _init:
                    0002    439 	ar2 = 0x02
                    0003    440 	ar3 = 0x03
                    0004    441 	ar4 = 0x04
                    0005    442 	ar5 = 0x05
                    0006    443 	ar6 = 0x06
                    0007    444 	ar7 = 0x07
                    0000    445 	ar0 = 0x00
                    0001    446 	ar1 = 0x01
                    0000    447 	C$main.c$36$1$1 ==.
                            448 ;	main.c:36: LED = 0xc0; // LED display is set to 0 when the system turns on
   0000 75 A0 C0            449 	mov	_P2,#0xC0
                    0003    450 	C$main.c$37$1$1 ==.
                            451 ;	main.c:37: FREE_SLOTS = 10; // We have X free slots in the parking house
   0003 75*00 0A            452 	mov	_FREE_SLOTS,#0x0A
                    0006    453 	C$main.c$39$1$1 ==.
                            454 ;	main.c:39: BUTTON_ENTER = 1; // Define as input
   0006 D2 91               455 	setb	_P1_1
                    0008    456 	C$main.c$40$1$1 ==.
                            457 ;	main.c:40: BUTTON_EXIT = 1; // Define as input
   0008 D2 92               458 	setb	_P1_2
                    000A    459 	C$main.c$41$1$1 ==.
                    000A    460 	XG$init$0$0 ==.
   000A 22                  461 	ret
                            462 ;------------------------------------------------------------
                            463 ;Allocation info for local variables in function 'main'
                            464 ;------------------------------------------------------------
                            465 ;------------------------------------------------------------
                    000B    466 	G$main$0$0 ==.
                    000B    467 	C$main.c$43$1$1 ==.
                            468 ;	main.c:43: void main (void)
                            469 ;	-----------------------------------------
                            470 ;	 function main
                            471 ;	-----------------------------------------
   000B                     472 _main:
                    000B    473 	C$main.c$47$1$1 ==.
                            474 ;	main.c:47: init();
   000B 12s00r00            475 	lcall	_init
                    000E    476 	C$main.c$50$1$1 ==.
                            477 ;	main.c:50: while (1)
   000E                     478 00106$:
                    000E    479 	C$main.c$52$1$2 ==.
                            480 ;	main.c:52: if (BUTTON_ENTER == 1)
   000E 30 91 FD            481 	jnb	_P1_1,00106$
                    0011    482 	C$main.c$55$3$3 ==.
                            483 ;	main.c:55: if (FREE_SLOTS > 0) {    
   0011 E5*00               484 	mov	a,_FREE_SLOTS
   0013 60 02               485 	jz	00102$
                    0015    486 	C$main.c$56$4$4 ==.
                            487 ;	main.c:56: FREE_SLOTS--;
   0015 15*00               488 	dec	_FREE_SLOTS
   0017                     489 00102$:
                    0017    490 	C$main.c$60$3$3 ==.
                            491 ;	main.c:60: LED = OUT[FREE_SLOTS];
   0017 E5*00               492 	mov	a,_FREE_SLOTS
   0019 24r01               493 	add	a,#_OUT
   001B F8                  494 	mov	r0,a
   001C 86 A0               495 	mov	_P2,@r0
                    001E    496 	C$main.c$62$3$3 ==.
                            497 ;	main.c:62: for (cycle_delay = 0; cycle_delay < 1000; cycle_delay++);
   001E 75*0B E8            498 	mov	_cycle_delay,#0xE8
   0021 75*0C 03            499 	mov	(_cycle_delay + 1),#0x03
   0024                     500 00110$:
   0024 15*0B               501 	dec	_cycle_delay
   0026 74 FF               502 	mov	a,#0xff
   0028 B5*0B 02            503 	cjne	a,_cycle_delay,00120$
   002B 15*0C               504 	dec	(_cycle_delay + 1)
   002D                     505 00120$:
   002D E5*0B               506 	mov	a,_cycle_delay
   002F 45*0C               507 	orl	a,(_cycle_delay + 1)
   0031 70 F1               508 	jnz	00110$
   0033 75*0B E8            509 	mov	_cycle_delay,#0xE8
   0036 75*0C 03            510 	mov	(_cycle_delay + 1),#0x03
                    0039    511 	C$main.c$65$1$1 ==.
                    0039    512 	XG$main$0$0 ==.
   0039 80 D3               513 	sjmp	00106$
                            514 	.area CSEG    (CODE)
                            515 	.area CONST   (CODE)
                            516 	.area XINIT   (CODE)
                            517 	.area CABS    (ABS,CODE)
