                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Mon Oct 24 10:27:41 2011
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _init
                             14 	.globl _CY
                             15 	.globl _AC
                             16 	.globl _F0
                             17 	.globl _RS1
                             18 	.globl _RS0
                             19 	.globl _OV
                             20 	.globl _F1
                             21 	.globl _P
                             22 	.globl _PS
                             23 	.globl _PT1
                             24 	.globl _PX1
                             25 	.globl _PT0
                             26 	.globl _PX0
                             27 	.globl _RD
                             28 	.globl _WR
                             29 	.globl _T1
                             30 	.globl _T0
                             31 	.globl _INT1
                             32 	.globl _INT0
                             33 	.globl _TXD
                             34 	.globl _RXD
                             35 	.globl _P3_7
                             36 	.globl _P3_6
                             37 	.globl _P3_5
                             38 	.globl _P3_4
                             39 	.globl _P3_3
                             40 	.globl _P3_2
                             41 	.globl _P3_1
                             42 	.globl _P3_0
                             43 	.globl _EA
                             44 	.globl _ES
                             45 	.globl _ET1
                             46 	.globl _EX1
                             47 	.globl _ET0
                             48 	.globl _EX0
                             49 	.globl _P2_7
                             50 	.globl _P2_6
                             51 	.globl _P2_5
                             52 	.globl _P2_4
                             53 	.globl _P2_3
                             54 	.globl _P2_2
                             55 	.globl _P2_1
                             56 	.globl _P2_0
                             57 	.globl _SM0
                             58 	.globl _SM1
                             59 	.globl _SM2
                             60 	.globl _REN
                             61 	.globl _TB8
                             62 	.globl _RB8
                             63 	.globl _TI
                             64 	.globl _RI
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TF1
                             74 	.globl _TR1
                             75 	.globl _TF0
                             76 	.globl _TR0
                             77 	.globl _IE1
                             78 	.globl _IT1
                             79 	.globl _IE0
                             80 	.globl _IT0
                             81 	.globl _P0_7
                             82 	.globl _P0_6
                             83 	.globl _P0_5
                             84 	.globl _P0_4
                             85 	.globl _P0_3
                             86 	.globl _P0_2
                             87 	.globl _P0_1
                             88 	.globl _P0_0
                             89 	.globl _B
                             90 	.globl _ACC
                             91 	.globl _PSW
                             92 	.globl _IP
                             93 	.globl _P3
                             94 	.globl _IE
                             95 	.globl _P2
                             96 	.globl _SBUF
                             97 	.globl _SCON
                             98 	.globl _P1
                             99 	.globl _TH1
                            100 	.globl _TH0
                            101 	.globl _TL1
                            102 	.globl _TL0
                            103 	.globl _TMOD
                            104 	.globl _TCON
                            105 	.globl _PCON
                            106 	.globl _DPH
                            107 	.globl _DPL
                            108 	.globl _SP
                            109 	.globl _P0
                            110 	.globl _cycle_duration
                            111 	.globl _cycle_delay
                            112 	.globl _OUT
                            113 	.globl _MAX_SLOTS
                            114 	.globl _free_slots
                            115 ;--------------------------------------------------------
                            116 ; special function registers
                            117 ;--------------------------------------------------------
                            118 	.area RSEG    (DATA)
                    0080    119 G$P0$0$0 == 0x0080
                    0080    120 _P0	=	0x0080
                    0081    121 G$SP$0$0 == 0x0081
                    0081    122 _SP	=	0x0081
                    0082    123 G$DPL$0$0 == 0x0082
                    0082    124 _DPL	=	0x0082
                    0083    125 G$DPH$0$0 == 0x0083
                    0083    126 _DPH	=	0x0083
                    0087    127 G$PCON$0$0 == 0x0087
                    0087    128 _PCON	=	0x0087
                    0088    129 G$TCON$0$0 == 0x0088
                    0088    130 _TCON	=	0x0088
                    0089    131 G$TMOD$0$0 == 0x0089
                    0089    132 _TMOD	=	0x0089
                    008A    133 G$TL0$0$0 == 0x008a
                    008A    134 _TL0	=	0x008a
                    008B    135 G$TL1$0$0 == 0x008b
                    008B    136 _TL1	=	0x008b
                    008C    137 G$TH0$0$0 == 0x008c
                    008C    138 _TH0	=	0x008c
                    008D    139 G$TH1$0$0 == 0x008d
                    008D    140 _TH1	=	0x008d
                    0090    141 G$P1$0$0 == 0x0090
                    0090    142 _P1	=	0x0090
                    0098    143 G$SCON$0$0 == 0x0098
                    0098    144 _SCON	=	0x0098
                    0099    145 G$SBUF$0$0 == 0x0099
                    0099    146 _SBUF	=	0x0099
                    00A0    147 G$P2$0$0 == 0x00a0
                    00A0    148 _P2	=	0x00a0
                    00A8    149 G$IE$0$0 == 0x00a8
                    00A8    150 _IE	=	0x00a8
                    00B0    151 G$P3$0$0 == 0x00b0
                    00B0    152 _P3	=	0x00b0
                    00B8    153 G$IP$0$0 == 0x00b8
                    00B8    154 _IP	=	0x00b8
                    00D0    155 G$PSW$0$0 == 0x00d0
                    00D0    156 _PSW	=	0x00d0
                    00E0    157 G$ACC$0$0 == 0x00e0
                    00E0    158 _ACC	=	0x00e0
                    00F0    159 G$B$0$0 == 0x00f0
                    00F0    160 _B	=	0x00f0
                            161 ;--------------------------------------------------------
                            162 ; special function bits
                            163 ;--------------------------------------------------------
                            164 	.area RSEG    (DATA)
                    0080    165 G$P0_0$0$0 == 0x0080
                    0080    166 _P0_0	=	0x0080
                    0081    167 G$P0_1$0$0 == 0x0081
                    0081    168 _P0_1	=	0x0081
                    0082    169 G$P0_2$0$0 == 0x0082
                    0082    170 _P0_2	=	0x0082
                    0083    171 G$P0_3$0$0 == 0x0083
                    0083    172 _P0_3	=	0x0083
                    0084    173 G$P0_4$0$0 == 0x0084
                    0084    174 _P0_4	=	0x0084
                    0085    175 G$P0_5$0$0 == 0x0085
                    0085    176 _P0_5	=	0x0085
                    0086    177 G$P0_6$0$0 == 0x0086
                    0086    178 _P0_6	=	0x0086
                    0087    179 G$P0_7$0$0 == 0x0087
                    0087    180 _P0_7	=	0x0087
                    0088    181 G$IT0$0$0 == 0x0088
                    0088    182 _IT0	=	0x0088
                    0089    183 G$IE0$0$0 == 0x0089
                    0089    184 _IE0	=	0x0089
                    008A    185 G$IT1$0$0 == 0x008a
                    008A    186 _IT1	=	0x008a
                    008B    187 G$IE1$0$0 == 0x008b
                    008B    188 _IE1	=	0x008b
                    008C    189 G$TR0$0$0 == 0x008c
                    008C    190 _TR0	=	0x008c
                    008D    191 G$TF0$0$0 == 0x008d
                    008D    192 _TF0	=	0x008d
                    008E    193 G$TR1$0$0 == 0x008e
                    008E    194 _TR1	=	0x008e
                    008F    195 G$TF1$0$0 == 0x008f
                    008F    196 _TF1	=	0x008f
                    0090    197 G$P1_0$0$0 == 0x0090
                    0090    198 _P1_0	=	0x0090
                    0091    199 G$P1_1$0$0 == 0x0091
                    0091    200 _P1_1	=	0x0091
                    0092    201 G$P1_2$0$0 == 0x0092
                    0092    202 _P1_2	=	0x0092
                    0093    203 G$P1_3$0$0 == 0x0093
                    0093    204 _P1_3	=	0x0093
                    0094    205 G$P1_4$0$0 == 0x0094
                    0094    206 _P1_4	=	0x0094
                    0095    207 G$P1_5$0$0 == 0x0095
                    0095    208 _P1_5	=	0x0095
                    0096    209 G$P1_6$0$0 == 0x0096
                    0096    210 _P1_6	=	0x0096
                    0097    211 G$P1_7$0$0 == 0x0097
                    0097    212 _P1_7	=	0x0097
                    0098    213 G$RI$0$0 == 0x0098
                    0098    214 _RI	=	0x0098
                    0099    215 G$TI$0$0 == 0x0099
                    0099    216 _TI	=	0x0099
                    009A    217 G$RB8$0$0 == 0x009a
                    009A    218 _RB8	=	0x009a
                    009B    219 G$TB8$0$0 == 0x009b
                    009B    220 _TB8	=	0x009b
                    009C    221 G$REN$0$0 == 0x009c
                    009C    222 _REN	=	0x009c
                    009D    223 G$SM2$0$0 == 0x009d
                    009D    224 _SM2	=	0x009d
                    009E    225 G$SM1$0$0 == 0x009e
                    009E    226 _SM1	=	0x009e
                    009F    227 G$SM0$0$0 == 0x009f
                    009F    228 _SM0	=	0x009f
                    00A0    229 G$P2_0$0$0 == 0x00a0
                    00A0    230 _P2_0	=	0x00a0
                    00A1    231 G$P2_1$0$0 == 0x00a1
                    00A1    232 _P2_1	=	0x00a1
                    00A2    233 G$P2_2$0$0 == 0x00a2
                    00A2    234 _P2_2	=	0x00a2
                    00A3    235 G$P2_3$0$0 == 0x00a3
                    00A3    236 _P2_3	=	0x00a3
                    00A4    237 G$P2_4$0$0 == 0x00a4
                    00A4    238 _P2_4	=	0x00a4
                    00A5    239 G$P2_5$0$0 == 0x00a5
                    00A5    240 _P2_5	=	0x00a5
                    00A6    241 G$P2_6$0$0 == 0x00a6
                    00A6    242 _P2_6	=	0x00a6
                    00A7    243 G$P2_7$0$0 == 0x00a7
                    00A7    244 _P2_7	=	0x00a7
                    00A8    245 G$EX0$0$0 == 0x00a8
                    00A8    246 _EX0	=	0x00a8
                    00A9    247 G$ET0$0$0 == 0x00a9
                    00A9    248 _ET0	=	0x00a9
                    00AA    249 G$EX1$0$0 == 0x00aa
                    00AA    250 _EX1	=	0x00aa
                    00AB    251 G$ET1$0$0 == 0x00ab
                    00AB    252 _ET1	=	0x00ab
                    00AC    253 G$ES$0$0 == 0x00ac
                    00AC    254 _ES	=	0x00ac
                    00AF    255 G$EA$0$0 == 0x00af
                    00AF    256 _EA	=	0x00af
                    00B0    257 G$P3_0$0$0 == 0x00b0
                    00B0    258 _P3_0	=	0x00b0
                    00B1    259 G$P3_1$0$0 == 0x00b1
                    00B1    260 _P3_1	=	0x00b1
                    00B2    261 G$P3_2$0$0 == 0x00b2
                    00B2    262 _P3_2	=	0x00b2
                    00B3    263 G$P3_3$0$0 == 0x00b3
                    00B3    264 _P3_3	=	0x00b3
                    00B4    265 G$P3_4$0$0 == 0x00b4
                    00B4    266 _P3_4	=	0x00b4
                    00B5    267 G$P3_5$0$0 == 0x00b5
                    00B5    268 _P3_5	=	0x00b5
                    00B6    269 G$P3_6$0$0 == 0x00b6
                    00B6    270 _P3_6	=	0x00b6
                    00B7    271 G$P3_7$0$0 == 0x00b7
                    00B7    272 _P3_7	=	0x00b7
                    00B0    273 G$RXD$0$0 == 0x00b0
                    00B0    274 _RXD	=	0x00b0
                    00B1    275 G$TXD$0$0 == 0x00b1
                    00B1    276 _TXD	=	0x00b1
                    00B2    277 G$INT0$0$0 == 0x00b2
                    00B2    278 _INT0	=	0x00b2
                    00B3    279 G$INT1$0$0 == 0x00b3
                    00B3    280 _INT1	=	0x00b3
                    00B4    281 G$T0$0$0 == 0x00b4
                    00B4    282 _T0	=	0x00b4
                    00B5    283 G$T1$0$0 == 0x00b5
                    00B5    284 _T1	=	0x00b5
                    00B6    285 G$WR$0$0 == 0x00b6
                    00B6    286 _WR	=	0x00b6
                    00B7    287 G$RD$0$0 == 0x00b7
                    00B7    288 _RD	=	0x00b7
                    00B8    289 G$PX0$0$0 == 0x00b8
                    00B8    290 _PX0	=	0x00b8
                    00B9    291 G$PT0$0$0 == 0x00b9
                    00B9    292 _PT0	=	0x00b9
                    00BA    293 G$PX1$0$0 == 0x00ba
                    00BA    294 _PX1	=	0x00ba
                    00BB    295 G$PT1$0$0 == 0x00bb
                    00BB    296 _PT1	=	0x00bb
                    00BC    297 G$PS$0$0 == 0x00bc
                    00BC    298 _PS	=	0x00bc
                    00D0    299 G$P$0$0 == 0x00d0
                    00D0    300 _P	=	0x00d0
                    00D1    301 G$F1$0$0 == 0x00d1
                    00D1    302 _F1	=	0x00d1
                    00D2    303 G$OV$0$0 == 0x00d2
                    00D2    304 _OV	=	0x00d2
                    00D3    305 G$RS0$0$0 == 0x00d3
                    00D3    306 _RS0	=	0x00d3
                    00D4    307 G$RS1$0$0 == 0x00d4
                    00D4    308 _RS1	=	0x00d4
                    00D5    309 G$F0$0$0 == 0x00d5
                    00D5    310 _F0	=	0x00d5
                    00D6    311 G$AC$0$0 == 0x00d6
                    00D6    312 _AC	=	0x00d6
                    00D7    313 G$CY$0$0 == 0x00d7
                    00D7    314 _CY	=	0x00d7
                            315 ;--------------------------------------------------------
                            316 ; overlayable register banks
                            317 ;--------------------------------------------------------
                            318 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     319 	.ds 8
                            320 ;--------------------------------------------------------
                            321 ; internal ram data
                            322 ;--------------------------------------------------------
                            323 	.area DSEG    (DATA)
                    0000    324 G$free_slots$0$0==.
   0000                     325 _free_slots::
   0000                     326 	.ds 1
                    0001    327 G$MAX_SLOTS$0$0==.
   0001                     328 _MAX_SLOTS::
   0001                     329 	.ds 2
                    0003    330 G$OUT$0$0==.
   0003                     331 _OUT::
   0003                     332 	.ds 10
                    000D    333 G$cycle_delay$0$0==.
   000D                     334 _cycle_delay::
   000D                     335 	.ds 4
                    0011    336 G$cycle_duration$0$0==.
   0011                     337 _cycle_duration::
   0011                     338 	.ds 4
                            339 ;--------------------------------------------------------
                            340 ; overlayable items in internal ram 
                            341 ;--------------------------------------------------------
                            342 	.area OSEG    (OVR,DATA)
                            343 ;--------------------------------------------------------
                            344 ; Stack segment in internal ram 
                            345 ;--------------------------------------------------------
                            346 	.area	SSEG	(DATA)
   0000                     347 __start__stack:
   0000                     348 	.ds	1
                            349 
                            350 ;--------------------------------------------------------
                            351 ; indirectly addressable internal ram data
                            352 ;--------------------------------------------------------
                            353 	.area ISEG    (DATA)
                            354 ;--------------------------------------------------------
                            355 ; absolute internal ram data
                            356 ;--------------------------------------------------------
                            357 	.area IABS    (ABS,DATA)
                            358 	.area IABS    (ABS,DATA)
                            359 ;--------------------------------------------------------
                            360 ; bit data
                            361 ;--------------------------------------------------------
                            362 	.area BSEG    (BIT)
                            363 ;--------------------------------------------------------
                            364 ; paged external ram data
                            365 ;--------------------------------------------------------
                            366 	.area PSEG    (PAG,XDATA)
                            367 ;--------------------------------------------------------
                            368 ; external ram data
                            369 ;--------------------------------------------------------
                            370 	.area XSEG    (XDATA)
                            371 ;--------------------------------------------------------
                            372 ; absolute external ram data
                            373 ;--------------------------------------------------------
                            374 	.area XABS    (ABS,XDATA)
                            375 ;--------------------------------------------------------
                            376 ; external initialized ram data
                            377 ;--------------------------------------------------------
                            378 	.area XISEG   (XDATA)
                            379 	.area HOME    (CODE)
                            380 	.area GSINIT0 (CODE)
                            381 	.area GSINIT1 (CODE)
                            382 	.area GSINIT2 (CODE)
                            383 	.area GSINIT3 (CODE)
                            384 	.area GSINIT4 (CODE)
                            385 	.area GSINIT5 (CODE)
                            386 	.area GSINIT  (CODE)
                            387 	.area GSFINAL (CODE)
                            388 	.area CSEG    (CODE)
                            389 ;--------------------------------------------------------
                            390 ; interrupt vector 
                            391 ;--------------------------------------------------------
                            392 	.area HOME    (CODE)
   0000                     393 __interrupt_vect:
   0000 02s00r00            394 	ljmp	__sdcc_gsinit_startup
                            395 ;--------------------------------------------------------
                            396 ; global & static initialisations
                            397 ;--------------------------------------------------------
                            398 	.area HOME    (CODE)
                            399 	.area GSINIT  (CODE)
                            400 	.area GSFINAL (CODE)
                            401 	.area GSINIT  (CODE)
                            402 	.globl __sdcc_gsinit_startup
                            403 	.globl __sdcc_program_startup
                            404 	.globl __start__stack
                            405 	.globl __mcs51_genXINIT
                            406 	.globl __mcs51_genXRAMCLEAR
                            407 	.globl __mcs51_genRAMCLEAR
                    0000    408 	G$main$0$0 ==.
                    0000    409 	C$main.c$27$1$1 ==.
                            410 ;	main.c:27: unsigned char OUT [] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99,
   0000 75*03 C0            411 	mov	_OUT,#0xC0
   0003 75*04 F9            412 	mov	(_OUT + 0x0001),#0xF9
   0006 75*05 A4            413 	mov	(_OUT + 0x0002),#0xA4
   0009 75*06 B0            414 	mov	(_OUT + 0x0003),#0xB0
   000C 75*07 99            415 	mov	(_OUT + 0x0004),#0x99
   000F 75*08 92            416 	mov	(_OUT + 0x0005),#0x92
   0012 75*09 82            417 	mov	(_OUT + 0x0006),#0x82
   0015 75*0A F0            418 	mov	(_OUT + 0x0007),#0xF0
   0018 75*0B 80            419 	mov	(_OUT + 0x0008),#0x80
   001B 75*0C 90            420 	mov	(_OUT + 0x0009),#0x90
                            421 	.area GSFINAL (CODE)
   0000 02s00r03            422 	ljmp	__sdcc_program_startup
                            423 ;--------------------------------------------------------
                            424 ; Home
                            425 ;--------------------------------------------------------
                            426 	.area HOME    (CODE)
                            427 	.area HOME    (CODE)
   0003                     428 __sdcc_program_startup:
   0003 12s00r1B            429 	lcall	_main
                            430 ;	return from main will lock up
   0006 80 FE               431 	sjmp .
                            432 ;--------------------------------------------------------
                            433 ; code
                            434 ;--------------------------------------------------------
                            435 	.area CSEG    (CODE)
                            436 ;------------------------------------------------------------
                            437 ;Allocation info for local variables in function 'init'
                            438 ;------------------------------------------------------------
                            439 ;------------------------------------------------------------
                    0000    440 	G$init$0$0 ==.
                    0000    441 	C$main.c$34$0$0 ==.
                            442 ;	main.c:34: void init(void) {
                            443 ;	-----------------------------------------
                            444 ;	 function init
                            445 ;	-----------------------------------------
   0000                     446 _init:
                    0002    447 	ar2 = 0x02
                    0003    448 	ar3 = 0x03
                    0004    449 	ar4 = 0x04
                    0005    450 	ar5 = 0x05
                    0006    451 	ar6 = 0x06
                    0007    452 	ar7 = 0x07
                    0000    453 	ar0 = 0x00
                    0001    454 	ar1 = 0x01
                    0000    455 	C$main.c$35$1$1 ==.
                            456 ;	main.c:35: LED = 0xc0; // LED display is set to 0 when the system turns on, then changes to MAX slots
   0000 75 A0 C0            457 	mov	_P2,#0xC0
                    0003    458 	C$main.c$36$1$1 ==.
                            459 ;	main.c:36: MAX_SLOTS = 10; // We have this many free slots, max
   0003 75*01 0A            460 	mov	_MAX_SLOTS,#0x0A
   0006 E4                  461 	clr	a
   0007 F5*02               462 	mov	(_MAX_SLOTS + 1),a
                    0009    463 	C$main.c$38$1$1 ==.
                            464 ;	main.c:38: free_slots = MAX_SLOTS; // All slots are empty in the beginning
   0009 75*00 0A            465 	mov	_free_slots,#0x0A
                    000C    466 	C$main.c$40$1$1 ==.
                            467 ;	main.c:40: BUTTON_ENTER = 1; // Define as input
   000C D2 91               468 	setb	_P1_1
                    000E    469 	C$main.c$41$1$1 ==.
                            470 ;	main.c:41: BUTTON_EXIT = 1; // Define as input
   000E D2 92               471 	setb	_P1_2
                    0010    472 	C$main.c$43$1$1 ==.
                            473 ;	main.c:43: cycle_duration = 10; // The artificial time delay is X cycles long
   0010 75*11 0A            474 	mov	_cycle_duration,#0x0A
   0013 E4                  475 	clr	a
   0014 F5*12               476 	mov	(_cycle_duration + 1),a
   0016 F5*13               477 	mov	(_cycle_duration + 2),a
   0018 F5*14               478 	mov	(_cycle_duration + 3),a
                    001A    479 	C$main.c$44$1$1 ==.
                    001A    480 	XG$init$0$0 ==.
   001A 22                  481 	ret
                            482 ;------------------------------------------------------------
                            483 ;Allocation info for local variables in function 'main'
                            484 ;------------------------------------------------------------
                            485 ;------------------------------------------------------------
                    001B    486 	G$main$0$0 ==.
                    001B    487 	C$main.c$47$1$1 ==.
                            488 ;	main.c:47: void main (void) {
                            489 ;	-----------------------------------------
                            490 ;	 function main
                            491 ;	-----------------------------------------
   001B                     492 _main:
                    001B    493 	C$main.c$49$1$1 ==.
                            494 ;	main.c:49: init();
   001B 12s00r00            495 	lcall	_init
                    001E    496 	C$main.c$51$1$1 ==.
                            497 ;	main.c:51: while (1) {
   001E                     498 00110$:
                    001E    499 	C$main.c$54$2$2 ==.
                            500 ;	main.c:54: if (BUTTON_ENTER == 1) {
   001E 30 91 06            501 	jnb	_P1_1,00104$
                    0021    502 	C$main.c$57$3$3 ==.
                            503 ;	main.c:57: if (free_slots > 0) {    
   0021 E5*00               504 	mov	a,_free_slots
   0023 60 02               505 	jz	00104$
                    0025    506 	C$main.c$58$4$4 ==.
                            507 ;	main.c:58: free_slots--;
   0025 15*00               508 	dec	_free_slots
   0027                     509 00104$:
                    0027    510 	C$main.c$63$2$2 ==.
                            511 ;	main.c:63: if (BUTTON_EXIT == 1) {
   0027 30 92 0F            512 	jnb	_P1_2,00108$
                    002A    513 	C$main.c$66$3$5 ==.
                            514 ;	main.c:66: if (free_slots < MAX_SLOTS) {
   002A AA*00               515 	mov	r2,_free_slots
   002C 7B 00               516 	mov	r3,#0x00
   002E C3                  517 	clr	c
   002F EA                  518 	mov	a,r2
   0030 95*01               519 	subb	a,_MAX_SLOTS
   0032 EB                  520 	mov	a,r3
   0033 95*02               521 	subb	a,(_MAX_SLOTS + 1)
   0035 50 02               522 	jnc	00108$
                    0037    523 	C$main.c$67$4$6 ==.
                            524 ;	main.c:67: free_slots++;
   0037 05*00               525 	inc	_free_slots
   0039                     526 00108$:
                    0039    527 	C$main.c$75$2$2 ==.
                            528 ;	main.c:75: for (cycle_delay = 0; cycle_delay < cycle_duration; cycle_delay++);
   0039 E4                  529 	clr	a
   003A F5*0D               530 	mov	_cycle_delay,a
   003C F5*0E               531 	mov	(_cycle_delay + 1),a
   003E F5*0F               532 	mov	(_cycle_delay + 2),a
   0040 F5*10               533 	mov	(_cycle_delay + 3),a
   0042                     534 00112$:
   0042 C3                  535 	clr	c
   0043 E5*0D               536 	mov	a,_cycle_delay
   0045 95*11               537 	subb	a,_cycle_duration
   0047 E5*0E               538 	mov	a,(_cycle_delay + 1)
   0049 95*12               539 	subb	a,(_cycle_duration + 1)
   004B E5*0F               540 	mov	a,(_cycle_delay + 2)
   004D 95*13               541 	subb	a,(_cycle_duration + 2)
   004F E5*10               542 	mov	a,(_cycle_delay + 3)
   0051 95*14               543 	subb	a,(_cycle_duration + 3)
   0053 50 14               544 	jnc	00115$
   0055 05*0D               545 	inc	_cycle_delay
   0057 E4                  546 	clr	a
   0058 B5*0D E7            547 	cjne	a,_cycle_delay,00112$
   005B 05*0E               548 	inc	(_cycle_delay + 1)
   005D B5*0E E2            549 	cjne	a,(_cycle_delay + 1),00112$
   0060 05*0F               550 	inc	(_cycle_delay + 2)
   0062 B5*0F DD            551 	cjne	a,(_cycle_delay + 2),00112$
   0065 05*10               552 	inc	(_cycle_delay + 3)
   0067 80 D9               553 	sjmp	00112$
   0069                     554 00115$:
                    0069    555 	C$main.c$78$2$2 ==.
                            556 ;	main.c:78: LED = OUT[free_slots];
   0069 E5*00               557 	mov	a,_free_slots
   006B 24r03               558 	add	a,#_OUT
   006D F8                  559 	mov	r0,a
   006E 86 A0               560 	mov	_P2,@r0
                    0070    561 	C$main.c$80$1$1 ==.
                    0070    562 	XG$main$0$0 ==.
   0070 80 AC               563 	sjmp	00110$
                            564 	.area CSEG    (CODE)
                            565 	.area CONST   (CODE)
                            566 	.area XINIT   (CODE)
                            567 	.area CABS    (ABS,CODE)
