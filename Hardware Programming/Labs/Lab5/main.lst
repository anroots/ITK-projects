                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Tue Oct 25 09:02:55 2011
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _check_incoming
                             14 	.globl _check_outgoing
                             15 	.globl _bounce_delay
                             16 	.globl _display
                             17 	.globl _get_digit
                             18 	.globl _write_segment
                             19 	.globl _init
                             20 	.globl _CY
                             21 	.globl _AC
                             22 	.globl _F0
                             23 	.globl _RS1
                             24 	.globl _RS0
                             25 	.globl _OV
                             26 	.globl _F1
                             27 	.globl _P
                             28 	.globl _PS
                             29 	.globl _PT1
                             30 	.globl _PX1
                             31 	.globl _PT0
                             32 	.globl _PX0
                             33 	.globl _RD
                             34 	.globl _WR
                             35 	.globl _T1
                             36 	.globl _T0
                             37 	.globl _INT1
                             38 	.globl _INT0
                             39 	.globl _TXD
                             40 	.globl _RXD
                             41 	.globl _P3_7
                             42 	.globl _P3_6
                             43 	.globl _P3_5
                             44 	.globl _P3_4
                             45 	.globl _P3_3
                             46 	.globl _P3_2
                             47 	.globl _P3_1
                             48 	.globl _P3_0
                             49 	.globl _EA
                             50 	.globl _ES
                             51 	.globl _ET1
                             52 	.globl _EX1
                             53 	.globl _ET0
                             54 	.globl _EX0
                             55 	.globl _P2_7
                             56 	.globl _P2_6
                             57 	.globl _P2_5
                             58 	.globl _P2_4
                             59 	.globl _P2_3
                             60 	.globl _P2_2
                             61 	.globl _P2_1
                             62 	.globl _P2_0
                             63 	.globl _SM0
                             64 	.globl _SM1
                             65 	.globl _SM2
                             66 	.globl _REN
                             67 	.globl _TB8
                             68 	.globl _RB8
                             69 	.globl _TI
                             70 	.globl _RI
                             71 	.globl _P1_7
                             72 	.globl _P1_6
                             73 	.globl _P1_5
                             74 	.globl _P1_4
                             75 	.globl _P1_3
                             76 	.globl _P1_2
                             77 	.globl _P1_1
                             78 	.globl _P1_0
                             79 	.globl _TF1
                             80 	.globl _TR1
                             81 	.globl _TF0
                             82 	.globl _TR0
                             83 	.globl _IE1
                             84 	.globl _IT1
                             85 	.globl _IE0
                             86 	.globl _IT0
                             87 	.globl _P0_7
                             88 	.globl _P0_6
                             89 	.globl _P0_5
                             90 	.globl _P0_4
                             91 	.globl _P0_3
                             92 	.globl _P0_2
                             93 	.globl _P0_1
                             94 	.globl _P0_0
                             95 	.globl _B
                             96 	.globl _ACC
                             97 	.globl _PSW
                             98 	.globl _IP
                             99 	.globl _P3
                            100 	.globl _IE
                            101 	.globl _P2
                            102 	.globl _SBUF
                            103 	.globl _SCON
                            104 	.globl _P1
                            105 	.globl _TH1
                            106 	.globl _TH0
                            107 	.globl _TL1
                            108 	.globl _TL0
                            109 	.globl _TMOD
                            110 	.globl _TCON
                            111 	.globl _PCON
                            112 	.globl _DPH
                            113 	.globl _DPL
                            114 	.globl _SP
                            115 	.globl _P0
                            116 	.globl _get_digit_PARM_2
                            117 	.globl _write_segment_PARM_2
                            118 	.globl _cycle_duration
                            119 	.globl _cycle_delay
                            120 	.globl _NUMBERS
                            121 	.globl _MAX_SLOTS
                            122 	.globl _free_slots
                            123 	.globl _NUMBER_OF_DIGITS
                            124 ;--------------------------------------------------------
                            125 ; special function registers
                            126 ;--------------------------------------------------------
                            127 	.area RSEG    (DATA)
                    0080    128 G$P0$0$0 == 0x0080
                    0080    129 _P0	=	0x0080
                    0081    130 G$SP$0$0 == 0x0081
                    0081    131 _SP	=	0x0081
                    0082    132 G$DPL$0$0 == 0x0082
                    0082    133 _DPL	=	0x0082
                    0083    134 G$DPH$0$0 == 0x0083
                    0083    135 _DPH	=	0x0083
                    0087    136 G$PCON$0$0 == 0x0087
                    0087    137 _PCON	=	0x0087
                    0088    138 G$TCON$0$0 == 0x0088
                    0088    139 _TCON	=	0x0088
                    0089    140 G$TMOD$0$0 == 0x0089
                    0089    141 _TMOD	=	0x0089
                    008A    142 G$TL0$0$0 == 0x008a
                    008A    143 _TL0	=	0x008a
                    008B    144 G$TL1$0$0 == 0x008b
                    008B    145 _TL1	=	0x008b
                    008C    146 G$TH0$0$0 == 0x008c
                    008C    147 _TH0	=	0x008c
                    008D    148 G$TH1$0$0 == 0x008d
                    008D    149 _TH1	=	0x008d
                    0090    150 G$P1$0$0 == 0x0090
                    0090    151 _P1	=	0x0090
                    0098    152 G$SCON$0$0 == 0x0098
                    0098    153 _SCON	=	0x0098
                    0099    154 G$SBUF$0$0 == 0x0099
                    0099    155 _SBUF	=	0x0099
                    00A0    156 G$P2$0$0 == 0x00a0
                    00A0    157 _P2	=	0x00a0
                    00A8    158 G$IE$0$0 == 0x00a8
                    00A8    159 _IE	=	0x00a8
                    00B0    160 G$P3$0$0 == 0x00b0
                    00B0    161 _P3	=	0x00b0
                    00B8    162 G$IP$0$0 == 0x00b8
                    00B8    163 _IP	=	0x00b8
                    00D0    164 G$PSW$0$0 == 0x00d0
                    00D0    165 _PSW	=	0x00d0
                    00E0    166 G$ACC$0$0 == 0x00e0
                    00E0    167 _ACC	=	0x00e0
                    00F0    168 G$B$0$0 == 0x00f0
                    00F0    169 _B	=	0x00f0
                            170 ;--------------------------------------------------------
                            171 ; special function bits
                            172 ;--------------------------------------------------------
                            173 	.area RSEG    (DATA)
                    0080    174 G$P0_0$0$0 == 0x0080
                    0080    175 _P0_0	=	0x0080
                    0081    176 G$P0_1$0$0 == 0x0081
                    0081    177 _P0_1	=	0x0081
                    0082    178 G$P0_2$0$0 == 0x0082
                    0082    179 _P0_2	=	0x0082
                    0083    180 G$P0_3$0$0 == 0x0083
                    0083    181 _P0_3	=	0x0083
                    0084    182 G$P0_4$0$0 == 0x0084
                    0084    183 _P0_4	=	0x0084
                    0085    184 G$P0_5$0$0 == 0x0085
                    0085    185 _P0_5	=	0x0085
                    0086    186 G$P0_6$0$0 == 0x0086
                    0086    187 _P0_6	=	0x0086
                    0087    188 G$P0_7$0$0 == 0x0087
                    0087    189 _P0_7	=	0x0087
                    0088    190 G$IT0$0$0 == 0x0088
                    0088    191 _IT0	=	0x0088
                    0089    192 G$IE0$0$0 == 0x0089
                    0089    193 _IE0	=	0x0089
                    008A    194 G$IT1$0$0 == 0x008a
                    008A    195 _IT1	=	0x008a
                    008B    196 G$IE1$0$0 == 0x008b
                    008B    197 _IE1	=	0x008b
                    008C    198 G$TR0$0$0 == 0x008c
                    008C    199 _TR0	=	0x008c
                    008D    200 G$TF0$0$0 == 0x008d
                    008D    201 _TF0	=	0x008d
                    008E    202 G$TR1$0$0 == 0x008e
                    008E    203 _TR1	=	0x008e
                    008F    204 G$TF1$0$0 == 0x008f
                    008F    205 _TF1	=	0x008f
                    0090    206 G$P1_0$0$0 == 0x0090
                    0090    207 _P1_0	=	0x0090
                    0091    208 G$P1_1$0$0 == 0x0091
                    0091    209 _P1_1	=	0x0091
                    0092    210 G$P1_2$0$0 == 0x0092
                    0092    211 _P1_2	=	0x0092
                    0093    212 G$P1_3$0$0 == 0x0093
                    0093    213 _P1_3	=	0x0093
                    0094    214 G$P1_4$0$0 == 0x0094
                    0094    215 _P1_4	=	0x0094
                    0095    216 G$P1_5$0$0 == 0x0095
                    0095    217 _P1_5	=	0x0095
                    0096    218 G$P1_6$0$0 == 0x0096
                    0096    219 _P1_6	=	0x0096
                    0097    220 G$P1_7$0$0 == 0x0097
                    0097    221 _P1_7	=	0x0097
                    0098    222 G$RI$0$0 == 0x0098
                    0098    223 _RI	=	0x0098
                    0099    224 G$TI$0$0 == 0x0099
                    0099    225 _TI	=	0x0099
                    009A    226 G$RB8$0$0 == 0x009a
                    009A    227 _RB8	=	0x009a
                    009B    228 G$TB8$0$0 == 0x009b
                    009B    229 _TB8	=	0x009b
                    009C    230 G$REN$0$0 == 0x009c
                    009C    231 _REN	=	0x009c
                    009D    232 G$SM2$0$0 == 0x009d
                    009D    233 _SM2	=	0x009d
                    009E    234 G$SM1$0$0 == 0x009e
                    009E    235 _SM1	=	0x009e
                    009F    236 G$SM0$0$0 == 0x009f
                    009F    237 _SM0	=	0x009f
                    00A0    238 G$P2_0$0$0 == 0x00a0
                    00A0    239 _P2_0	=	0x00a0
                    00A1    240 G$P2_1$0$0 == 0x00a1
                    00A1    241 _P2_1	=	0x00a1
                    00A2    242 G$P2_2$0$0 == 0x00a2
                    00A2    243 _P2_2	=	0x00a2
                    00A3    244 G$P2_3$0$0 == 0x00a3
                    00A3    245 _P2_3	=	0x00a3
                    00A4    246 G$P2_4$0$0 == 0x00a4
                    00A4    247 _P2_4	=	0x00a4
                    00A5    248 G$P2_5$0$0 == 0x00a5
                    00A5    249 _P2_5	=	0x00a5
                    00A6    250 G$P2_6$0$0 == 0x00a6
                    00A6    251 _P2_6	=	0x00a6
                    00A7    252 G$P2_7$0$0 == 0x00a7
                    00A7    253 _P2_7	=	0x00a7
                    00A8    254 G$EX0$0$0 == 0x00a8
                    00A8    255 _EX0	=	0x00a8
                    00A9    256 G$ET0$0$0 == 0x00a9
                    00A9    257 _ET0	=	0x00a9
                    00AA    258 G$EX1$0$0 == 0x00aa
                    00AA    259 _EX1	=	0x00aa
                    00AB    260 G$ET1$0$0 == 0x00ab
                    00AB    261 _ET1	=	0x00ab
                    00AC    262 G$ES$0$0 == 0x00ac
                    00AC    263 _ES	=	0x00ac
                    00AF    264 G$EA$0$0 == 0x00af
                    00AF    265 _EA	=	0x00af
                    00B0    266 G$P3_0$0$0 == 0x00b0
                    00B0    267 _P3_0	=	0x00b0
                    00B1    268 G$P3_1$0$0 == 0x00b1
                    00B1    269 _P3_1	=	0x00b1
                    00B2    270 G$P3_2$0$0 == 0x00b2
                    00B2    271 _P3_2	=	0x00b2
                    00B3    272 G$P3_3$0$0 == 0x00b3
                    00B3    273 _P3_3	=	0x00b3
                    00B4    274 G$P3_4$0$0 == 0x00b4
                    00B4    275 _P3_4	=	0x00b4
                    00B5    276 G$P3_5$0$0 == 0x00b5
                    00B5    277 _P3_5	=	0x00b5
                    00B6    278 G$P3_6$0$0 == 0x00b6
                    00B6    279 _P3_6	=	0x00b6
                    00B7    280 G$P3_7$0$0 == 0x00b7
                    00B7    281 _P3_7	=	0x00b7
                    00B0    282 G$RXD$0$0 == 0x00b0
                    00B0    283 _RXD	=	0x00b0
                    00B1    284 G$TXD$0$0 == 0x00b1
                    00B1    285 _TXD	=	0x00b1
                    00B2    286 G$INT0$0$0 == 0x00b2
                    00B2    287 _INT0	=	0x00b2
                    00B3    288 G$INT1$0$0 == 0x00b3
                    00B3    289 _INT1	=	0x00b3
                    00B4    290 G$T0$0$0 == 0x00b4
                    00B4    291 _T0	=	0x00b4
                    00B5    292 G$T1$0$0 == 0x00b5
                    00B5    293 _T1	=	0x00b5
                    00B6    294 G$WR$0$0 == 0x00b6
                    00B6    295 _WR	=	0x00b6
                    00B7    296 G$RD$0$0 == 0x00b7
                    00B7    297 _RD	=	0x00b7
                    00B8    298 G$PX0$0$0 == 0x00b8
                    00B8    299 _PX0	=	0x00b8
                    00B9    300 G$PT0$0$0 == 0x00b9
                    00B9    301 _PT0	=	0x00b9
                    00BA    302 G$PX1$0$0 == 0x00ba
                    00BA    303 _PX1	=	0x00ba
                    00BB    304 G$PT1$0$0 == 0x00bb
                    00BB    305 _PT1	=	0x00bb
                    00BC    306 G$PS$0$0 == 0x00bc
                    00BC    307 _PS	=	0x00bc
                    00D0    308 G$P$0$0 == 0x00d0
                    00D0    309 _P	=	0x00d0
                    00D1    310 G$F1$0$0 == 0x00d1
                    00D1    311 _F1	=	0x00d1
                    00D2    312 G$OV$0$0 == 0x00d2
                    00D2    313 _OV	=	0x00d2
                    00D3    314 G$RS0$0$0 == 0x00d3
                    00D3    315 _RS0	=	0x00d3
                    00D4    316 G$RS1$0$0 == 0x00d4
                    00D4    317 _RS1	=	0x00d4
                    00D5    318 G$F0$0$0 == 0x00d5
                    00D5    319 _F0	=	0x00d5
                    00D6    320 G$AC$0$0 == 0x00d6
                    00D6    321 _AC	=	0x00d6
                    00D7    322 G$CY$0$0 == 0x00d7
                    00D7    323 _CY	=	0x00d7
                            324 ;--------------------------------------------------------
                            325 ; overlayable register banks
                            326 ;--------------------------------------------------------
                            327 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     328 	.ds 8
                            329 ;--------------------------------------------------------
                            330 ; internal ram data
                            331 ;--------------------------------------------------------
                            332 	.area DSEG    (DATA)
                    0000    333 G$NUMBER_OF_DIGITS$0$0==.
   0000                     334 _NUMBER_OF_DIGITS::
   0000                     335 	.ds 1
                    0001    336 G$free_slots$0$0==.
   0001                     337 _free_slots::
   0001                     338 	.ds 2
                    0003    339 G$MAX_SLOTS$0$0==.
   0003                     340 _MAX_SLOTS::
   0003                     341 	.ds 2
                    0005    342 G$NUMBERS$0$0==.
   0005                     343 _NUMBERS::
   0005                     344 	.ds 10
                    000F    345 G$cycle_delay$0$0==.
   000F                     346 _cycle_delay::
   000F                     347 	.ds 4
                    0013    348 G$cycle_duration$0$0==.
   0013                     349 _cycle_duration::
   0013                     350 	.ds 4
                    0017    351 Lwrite_segment$value$1$1==.
   0017                     352 _write_segment_PARM_2:
   0017                     353 	.ds 1
                    0018    354 Lget_digit$place$1$1==.
   0018                     355 _get_digit_PARM_2:
   0018                     356 	.ds 1
                            357 ;--------------------------------------------------------
                            358 ; overlayable items in internal ram 
                            359 ;--------------------------------------------------------
                            360 	.area OSEG    (OVR,DATA)
                            361 ;--------------------------------------------------------
                            362 ; Stack segment in internal ram 
                            363 ;--------------------------------------------------------
                            364 	.area	SSEG	(DATA)
   0000                     365 __start__stack:
   0000                     366 	.ds	1
                            367 
                            368 ;--------------------------------------------------------
                            369 ; indirectly addressable internal ram data
                            370 ;--------------------------------------------------------
                            371 	.area ISEG    (DATA)
                            372 ;--------------------------------------------------------
                            373 ; absolute internal ram data
                            374 ;--------------------------------------------------------
                            375 	.area IABS    (ABS,DATA)
                            376 	.area IABS    (ABS,DATA)
                            377 ;--------------------------------------------------------
                            378 ; bit data
                            379 ;--------------------------------------------------------
                            380 	.area BSEG    (BIT)
                            381 ;--------------------------------------------------------
                            382 ; paged external ram data
                            383 ;--------------------------------------------------------
                            384 	.area PSEG    (PAG,XDATA)
                            385 ;--------------------------------------------------------
                            386 ; external ram data
                            387 ;--------------------------------------------------------
                            388 	.area XSEG    (XDATA)
                            389 ;--------------------------------------------------------
                            390 ; absolute external ram data
                            391 ;--------------------------------------------------------
                            392 	.area XABS    (ABS,XDATA)
                            393 ;--------------------------------------------------------
                            394 ; external initialized ram data
                            395 ;--------------------------------------------------------
                            396 	.area XISEG   (XDATA)
                            397 	.area HOME    (CODE)
                            398 	.area GSINIT0 (CODE)
                            399 	.area GSINIT1 (CODE)
                            400 	.area GSINIT2 (CODE)
                            401 	.area GSINIT3 (CODE)
                            402 	.area GSINIT4 (CODE)
                            403 	.area GSINIT5 (CODE)
                            404 	.area GSINIT  (CODE)
                            405 	.area GSFINAL (CODE)
                            406 	.area CSEG    (CODE)
                            407 ;--------------------------------------------------------
                            408 ; interrupt vector 
                            409 ;--------------------------------------------------------
                            410 	.area HOME    (CODE)
   0000                     411 __interrupt_vect:
   0000 02s00r00            412 	ljmp	__sdcc_gsinit_startup
                            413 ;--------------------------------------------------------
                            414 ; global & static initialisations
                            415 ;--------------------------------------------------------
                            416 	.area HOME    (CODE)
                            417 	.area GSINIT  (CODE)
                            418 	.area GSFINAL (CODE)
                            419 	.area GSINIT  (CODE)
                            420 	.globl __sdcc_gsinit_startup
                            421 	.globl __sdcc_program_startup
                            422 	.globl __start__stack
                            423 	.globl __mcs51_genXINIT
                            424 	.globl __mcs51_genXRAMCLEAR
                            425 	.globl __mcs51_genRAMCLEAR
                    0000    426 	G$main$0$0 ==.
                    0000    427 	C$main.c$21$1$1 ==.
                            428 ;	main.c:21: unsigned char NUMBER_OF_DIGITS = 3;
   0000 75*00 03            429 	mov	_NUMBER_OF_DIGITS,#0x03
                    0003    430 	G$main$0$0 ==.
                    0003    431 	C$main.c$29$1$1 ==.
                            432 ;	main.c:29: unsigned char NUMBERS [] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99,
   0003 75*05 C0            433 	mov	_NUMBERS,#0xC0
   0006 75*06 F9            434 	mov	(_NUMBERS + 0x0001),#0xF9
   0009 75*07 A4            435 	mov	(_NUMBERS + 0x0002),#0xA4
   000C 75*08 B0            436 	mov	(_NUMBERS + 0x0003),#0xB0
   000F 75*09 99            437 	mov	(_NUMBERS + 0x0004),#0x99
   0012 75*0A 92            438 	mov	(_NUMBERS + 0x0005),#0x92
   0015 75*0B 82            439 	mov	(_NUMBERS + 0x0006),#0x82
   0018 75*0C F0            440 	mov	(_NUMBERS + 0x0007),#0xF0
   001B 75*0D 80            441 	mov	(_NUMBERS + 0x0008),#0x80
   001E 75*0E 90            442 	mov	(_NUMBERS + 0x0009),#0x90
                            443 	.area GSFINAL (CODE)
   0000 02s00r03            444 	ljmp	__sdcc_program_startup
                            445 ;--------------------------------------------------------
                            446 ; Home
                            447 ;--------------------------------------------------------
                            448 	.area HOME    (CODE)
                            449 	.area HOME    (CODE)
   0003                     450 __sdcc_program_startup:
   0003 12s01r24            451 	lcall	_main
                            452 ;	return from main will lock up
   0006 80 FE               453 	sjmp .
                            454 ;--------------------------------------------------------
                            455 ; code
                            456 ;--------------------------------------------------------
                            457 	.area CSEG    (CODE)
                            458 ;------------------------------------------------------------
                            459 ;Allocation info for local variables in function 'init'
                            460 ;------------------------------------------------------------
                            461 ;------------------------------------------------------------
                    0000    462 	G$init$0$0 ==.
                    0000    463 	C$main.c$37$0$0 ==.
                            464 ;	main.c:37: void init(void) {
                            465 ;	-----------------------------------------
                            466 ;	 function init
                            467 ;	-----------------------------------------
   0000                     468 _init:
                    0002    469 	ar2 = 0x02
                    0003    470 	ar3 = 0x03
                    0004    471 	ar4 = 0x04
                    0005    472 	ar5 = 0x05
                    0006    473 	ar6 = 0x06
                    0007    474 	ar7 = 0x07
                    0000    475 	ar0 = 0x00
                    0001    476 	ar1 = 0x01
                    0000    477 	C$main.c$38$1$1 ==.
                            478 ;	main.c:38: MAX_SLOTS = 200; // We have this many free slots, max
   0000 75*03 C8            479 	mov	_MAX_SLOTS,#0xC8
   0003 E4                  480 	clr	a
   0004 F5*04               481 	mov	(_MAX_SLOTS + 1),a
                    0006    482 	C$main.c$40$1$1 ==.
                            483 ;	main.c:40: free_slots = MAX_SLOTS; // All slots are empty in the beginning
   0006 75*01 C8            484 	mov	_free_slots,#0xC8
   0009 E4                  485 	clr	a
   000A F5*02               486 	mov	(_free_slots + 1),a
                    000C    487 	C$main.c$42$1$1 ==.
                            488 ;	main.c:42: BUTTON_ENTER = 1; // Define as input
   000C D2 90               489 	setb	_P1_0
                    000E    490 	C$main.c$43$1$1 ==.
                            491 ;	main.c:43: BUTTON_EXIT = 1; // Define as input
   000E D2 91               492 	setb	_P1_1
                    0010    493 	C$main.c$45$1$1 ==.
                            494 ;	main.c:45: cycle_duration = 1; // The artificial time delay is X cycles long
   0010 75*13 01            495 	mov	_cycle_duration,#0x01
   0013 E4                  496 	clr	a
   0014 F5*14               497 	mov	(_cycle_duration + 1),a
   0016 F5*15               498 	mov	(_cycle_duration + 2),a
   0018 F5*16               499 	mov	(_cycle_duration + 3),a
                    001A    500 	C$main.c$46$1$1 ==.
                    001A    501 	XG$init$0$0 ==.
   001A 22                  502 	ret
                            503 ;------------------------------------------------------------
                            504 ;Allocation info for local variables in function 'write_segment'
                            505 ;------------------------------------------------------------
                            506 ;value                     Allocated with name '_write_segment_PARM_2'
                            507 ;segment_number            Allocated to registers r2 
                            508 ;------------------------------------------------------------
                    001B    509 	G$write_segment$0$0 ==.
                    001B    510 	C$main.c$54$1$1 ==.
                            511 ;	main.c:54: void write_segment(unsigned char segment_number, unsigned char value) {
                            512 ;	-----------------------------------------
                            513 ;	 function write_segment
                            514 ;	-----------------------------------------
   001B                     515 _write_segment:
   001B AA 82               516 	mov	r2,dpl
                    001D    517 	C$main.c$56$1$1 ==.
                            518 ;	main.c:56: P3_0 = 1; // Reset P3 to avoid flickers
   001D D2 B0               519 	setb	_P3_0
                    001F    520 	C$main.c$57$1$1 ==.
                            521 ;	main.c:57: P3_1 = 1;
   001F D2 B1               522 	setb	_P3_1
                    0021    523 	C$main.c$58$1$1 ==.
                            524 ;	main.c:58: P3_2 = 1;
   0021 D2 B2               525 	setb	_P3_2
                    0023    526 	C$main.c$61$1$1 ==.
                            527 ;	main.c:61: P2 = NUMBERS[value];
   0023 E5*17               528 	mov	a,_write_segment_PARM_2
   0025 24r05               529 	add	a,#_NUMBERS
   0027 F8                  530 	mov	r0,a
   0028 86 A0               531 	mov	_P2,@r0
                    002A    532 	C$main.c$64$1$1 ==.
                            533 ;	main.c:64: switch (segment_number) {
   002A BA 00 02            534 	cjne	r2,#0x00,00110$
   002D 80 0A               535 	sjmp	00101$
   002F                     536 00110$:
   002F BA 01 02            537 	cjne	r2,#0x01,00111$
   0032 80 0C               538 	sjmp	00102$
   0034                     539 00111$:
                    0034    540 	C$main.c$65$2$2 ==.
                            541 ;	main.c:65: case 0:
   0034 BA 02 16            542 	cjne	r2,#0x02,00105$
   0037 80 0E               543 	sjmp	00103$
   0039                     544 00101$:
                    0039    545 	C$main.c$66$2$2 ==.
                            546 ;	main.c:66: P3_1 = 1;
   0039 D2 B1               547 	setb	_P3_1
                    003B    548 	C$main.c$67$2$2 ==.
                            549 ;	main.c:67: P3_2 = 1;
   003B D2 B2               550 	setb	_P3_2
                    003D    551 	C$main.c$68$2$2 ==.
                            552 ;	main.c:68: P3_0 = 0;
   003D C2 B0               553 	clr	_P3_0
                    003F    554 	C$main.c$69$2$2 ==.
                            555 ;	main.c:69: break;
                    003F    556 	C$main.c$70$2$2 ==.
                            557 ;	main.c:70: case 1:
   003F 22                  558 	ret
   0040                     559 00102$:
                    0040    560 	C$main.c$71$2$2 ==.
                            561 ;	main.c:71: P3_0 = 1;
   0040 D2 B0               562 	setb	_P3_0
                    0042    563 	C$main.c$72$2$2 ==.
                            564 ;	main.c:72: P3_2 = 1;
   0042 D2 B2               565 	setb	_P3_2
                    0044    566 	C$main.c$73$2$2 ==.
                            567 ;	main.c:73: P3_1 = 0;
   0044 C2 B1               568 	clr	_P3_1
                    0046    569 	C$main.c$74$2$2 ==.
                            570 ;	main.c:74: break;
                    0046    571 	C$main.c$75$2$2 ==.
                            572 ;	main.c:75: case 2:
   0046 22                  573 	ret
   0047                     574 00103$:
                    0047    575 	C$main.c$76$2$2 ==.
                            576 ;	main.c:76: P3_3 = 1;
   0047 D2 B3               577 	setb	_P3_3
                    0049    578 	C$main.c$77$2$2 ==.
                            579 ;	main.c:77: P3_1 = 1;
   0049 D2 B1               580 	setb	_P3_1
                    004B    581 	C$main.c$78$2$2 ==.
                            582 ;	main.c:78: P3_2 = 0;
   004B C2 B2               583 	clr	_P3_2
                    004D    584 	C$main.c$80$1$1 ==.
                            585 ;	main.c:80: }
   004D                     586 00105$:
                    004D    587 	C$main.c$81$1$1 ==.
                    004D    588 	XG$write_segment$0$0 ==.
   004D 22                  589 	ret
                            590 ;------------------------------------------------------------
                            591 ;Allocation info for local variables in function 'get_digit'
                            592 ;------------------------------------------------------------
                            593 ;place                     Allocated with name '_get_digit_PARM_2'
                            594 ;value                     Allocated to registers r2 r3 
                            595 ;------------------------------------------------------------
                    004E    596 	G$get_digit$0$0 ==.
                    004E    597 	C$main.c$87$1$1 ==.
                            598 ;	main.c:87: unsigned char get_digit(unsigned int value, unsigned char place) {
                            599 ;	-----------------------------------------
                            600 ;	 function get_digit
                            601 ;	-----------------------------------------
   004E                     602 _get_digit:
   004E AA 82               603 	mov	r2,dpl
   0050 AB 83               604 	mov	r3,dph
                    0052    605 	C$main.c$89$1$1 ==.
                            606 ;	main.c:89: if (place == 0) {
   0052 E5*18               607 	mov	a,_get_digit_PARM_2
   0054 70 0B               608 	jnz	00104$
                    0056    609 	C$main.c$90$2$2 ==.
                            610 ;	main.c:90: return (unsigned char)value % 10;
   0056 8A 04               611 	mov	ar4,r2
   0058 75 F0 0A            612 	mov	b,#0x0A
   005B EC                  613 	mov	a,r4
   005C 84                  614 	div	ab
   005D 85 F0 82            615 	mov	dpl,b
   0060 22                  616 	ret
   0061                     617 00104$:
                    0061    618 	C$main.c$91$1$1 ==.
                            619 ;	main.c:91: } else if (place == 1) {
   0061 74 01               620 	mov	a,#0x01
   0063 B5*18 18            621 	cjne	a,_get_digit_PARM_2,00105$
                    0066    622 	C$main.c$92$1$1 ==.
                            623 ;	main.c:92: return (unsigned char)(value / 10) % 10;
   0066 75*00 0A            624 	mov	__divuint_PARM_2,#0x0A
   0069 E4                  625 	clr	a
   006A F5*01               626 	mov	(__divuint_PARM_2 + 1),a
   006C 8A 82               627 	mov	dpl,r2
   006E 8B 83               628 	mov	dph,r3
   0070 12s00r00            629 	lcall	__divuint
   0073 AC 82               630 	mov	r4,dpl
   0075 75 F0 0A            631 	mov	b,#0x0A
   0078 EC                  632 	mov	a,r4
   0079 84                  633 	div	ab
   007A 85 F0 82            634 	mov	dpl,b
   007D 22                  635 	ret
   007E                     636 00105$:
                    007E    637 	C$main.c$94$1$1 ==.
                            638 ;	main.c:94: return (unsigned char)(value / 100);
   007E 75*00 64            639 	mov	__divuint_PARM_2,#0x64
   0081 E4                  640 	clr	a
   0082 F5*01               641 	mov	(__divuint_PARM_2 + 1),a
   0084 8A 82               642 	mov	dpl,r2
   0086 8B 83               643 	mov	dph,r3
                    0088    644 	C$main.c$95$1$1 ==.
                    0088    645 	XG$get_digit$0$0 ==.
   0088 02s00r00            646 	ljmp	__divuint
                            647 ;------------------------------------------------------------
                            648 ;Allocation info for local variables in function 'display'
                            649 ;------------------------------------------------------------
                            650 ;value                     Allocated to registers r2 r3 
                            651 ;i                         Allocated to registers r4 
                            652 ;------------------------------------------------------------
                    008B    653 	G$display$0$0 ==.
                    008B    654 	C$main.c$102$1$1 ==.
                            655 ;	main.c:102: void display(unsigned int value) {
                            656 ;	-----------------------------------------
                            657 ;	 function display
                            658 ;	-----------------------------------------
   008B                     659 _display:
   008B AA 82               660 	mov	r2,dpl
   008D AB 83               661 	mov	r3,dph
                    008F    662 	C$main.c$107$1$1 ==.
                            663 ;	main.c:107: for (i = 0; i < NUMBER_OF_DIGITS; i++) {
   008F 7C 00               664 	mov	r4,#0x00
   0091                     665 00101$:
   0091 C3                  666 	clr	c
   0092 EC                  667 	mov	a,r4
   0093 95*00               668 	subb	a,_NUMBER_OF_DIGITS
   0095 50 24               669 	jnc	00105$
                    0097    670 	C$main.c$108$2$2 ==.
                            671 ;	main.c:108: write_segment(i, get_digit(value, i));
   0097 8C*18               672 	mov	_get_digit_PARM_2,r4
   0099 8A 82               673 	mov	dpl,r2
   009B 8B 83               674 	mov	dph,r3
   009D C0 02               675 	push	ar2
   009F C0 03               676 	push	ar3
   00A1 C0 04               677 	push	ar4
   00A3 12s00r4E            678 	lcall	_get_digit
   00A6 85 82*17            679 	mov	_write_segment_PARM_2,dpl
   00A9 D0 04               680 	pop	ar4
   00AB 8C 82               681 	mov	dpl,r4
   00AD C0 04               682 	push	ar4
   00AF 12s00r1B            683 	lcall	_write_segment
   00B2 D0 04               684 	pop	ar4
   00B4 D0 03               685 	pop	ar3
   00B6 D0 02               686 	pop	ar2
                    00B8    687 	C$main.c$107$1$1 ==.
                            688 ;	main.c:107: for (i = 0; i < NUMBER_OF_DIGITS; i++) {
   00B8 0C                  689 	inc	r4
   00B9 80 D6               690 	sjmp	00101$
   00BB                     691 00105$:
                    00BB    692 	C$main.c$110$1$1 ==.
                    00BB    693 	XG$display$0$0 ==.
   00BB 22                  694 	ret
                            695 ;------------------------------------------------------------
                            696 ;Allocation info for local variables in function 'bounce_delay'
                            697 ;------------------------------------------------------------
                            698 ;------------------------------------------------------------
                    00BC    699 	G$bounce_delay$0$0 ==.
                    00BC    700 	C$main.c$116$1$1 ==.
                            701 ;	main.c:116: void bounce_delay() {
                            702 ;	-----------------------------------------
                            703 ;	 function bounce_delay
                            704 ;	-----------------------------------------
   00BC                     705 _bounce_delay:
                    00BC    706 	C$main.c$117$1$1 ==.
                            707 ;	main.c:117: for (cycle_delay = 0; cycle_delay < 10; cycle_delay++);
   00BC 75*0F 0A            708 	mov	_cycle_delay,#0x0A
   00BF E4                  709 	clr	a
   00C0 F5*10               710 	mov	(_cycle_delay + 1),a
   00C2 F5*11               711 	mov	(_cycle_delay + 2),a
   00C4 F5*12               712 	mov	(_cycle_delay + 3),a
   00C6                     713 00103$:
   00C6 15*0F               714 	dec	_cycle_delay
   00C8 74 FF               715 	mov	a,#0xff
   00CA B5*0F 0C            716 	cjne	a,_cycle_delay,00108$
   00CD 15*10               717 	dec	(_cycle_delay + 1)
   00CF B5*10 07            718 	cjne	a,(_cycle_delay + 1),00108$
   00D2 15*11               719 	dec	(_cycle_delay + 2)
   00D4 B5*11 02            720 	cjne	a,(_cycle_delay + 2),00108$
   00D7 15*12               721 	dec	(_cycle_delay + 3)
   00D9                     722 00108$:
   00D9 E5*0F               723 	mov	a,_cycle_delay
   00DB 45*10               724 	orl	a,(_cycle_delay + 1)
   00DD 45*11               725 	orl	a,(_cycle_delay + 2)
   00DF 45*12               726 	orl	a,(_cycle_delay + 3)
   00E1 70 E3               727 	jnz	00103$
   00E3 75*0F 0A            728 	mov	_cycle_delay,#0x0A
   00E6 E4                  729 	clr	a
   00E7 F5*10               730 	mov	(_cycle_delay + 1),a
   00E9 F5*11               731 	mov	(_cycle_delay + 2),a
   00EB F5*12               732 	mov	(_cycle_delay + 3),a
                    00ED    733 	C$main.c$118$1$1 ==.
                    00ED    734 	XG$bounce_delay$0$0 ==.
   00ED 22                  735 	ret
                            736 ;------------------------------------------------------------
                            737 ;Allocation info for local variables in function 'check_outgoing'
                            738 ;------------------------------------------------------------
                            739 ;------------------------------------------------------------
                    00EE    740 	G$check_outgoing$0$0 ==.
                    00EE    741 	C$main.c$124$1$1 ==.
                            742 ;	main.c:124: void check_outgoing(){
                            743 ;	-----------------------------------------
                            744 ;	 function check_outgoing
                            745 ;	-----------------------------------------
   00EE                     746 _check_outgoing:
                    00EE    747 	C$main.c$126$1$1 ==.
                            748 ;	main.c:126: if (BUTTON_EXIT == 1) {
   00EE 30 91 19            749 	jnb	_P1_1,00107$
                    00F1    750 	C$main.c$128$2$2 ==.
                            751 ;	main.c:128: bounce_delay();
   00F1 12s00rBC            752 	lcall	_bounce_delay
                    00F4    753 	C$main.c$129$1$2 ==.
                            754 ;	main.c:129: if (BUTTON_EXIT == 1) {
   00F4 30 91 13            755 	jnb	_P1_1,00107$
                    00F7    756 	C$main.c$131$3$3 ==.
                            757 ;	main.c:131: if (free_slots < MAX_SLOTS) {
   00F7 C3                  758 	clr	c
   00F8 E5*01               759 	mov	a,_free_slots
   00FA 95*03               760 	subb	a,_MAX_SLOTS
   00FC E5*02               761 	mov	a,(_free_slots + 1)
   00FE 95*04               762 	subb	a,(_MAX_SLOTS + 1)
   0100 50 08               763 	jnc	00107$
                    0102    764 	C$main.c$132$4$4 ==.
                            765 ;	main.c:132: free_slots++;
   0102 05*01               766 	inc	_free_slots
   0104 E4                  767 	clr	a
   0105 B5*01 02            768 	cjne	a,_free_slots,00115$
   0108 05*02               769 	inc	(_free_slots + 1)
   010A                     770 00115$:
   010A                     771 00107$:
                    010A    772 	C$main.c$136$1$1 ==.
                    010A    773 	XG$check_outgoing$0$0 ==.
   010A 22                  774 	ret
                            775 ;------------------------------------------------------------
                            776 ;Allocation info for local variables in function 'check_incoming'
                            777 ;------------------------------------------------------------
                            778 ;------------------------------------------------------------
                    010B    779 	G$check_incoming$0$0 ==.
                    010B    780 	C$main.c$142$1$1 ==.
                            781 ;	main.c:142: void check_incoming() {
                            782 ;	-----------------------------------------
                            783 ;	 function check_incoming
                            784 ;	-----------------------------------------
   010B                     785 _check_incoming:
                    010B    786 	C$main.c$143$1$1 ==.
                            787 ;	main.c:143: if (BUTTON_ENTER == 1) {
   010B 30 90 15            788 	jnb	_P1_0,00107$
                    010E    789 	C$main.c$144$2$2 ==.
                            790 ;	main.c:144: bounce_delay();
   010E 12s00rBC            791 	lcall	_bounce_delay
                    0111    792 	C$main.c$146$1$2 ==.
                            793 ;	main.c:146: if (BUTTON_ENTER == 1) {
   0111 30 90 0F            794 	jnb	_P1_0,00107$
                    0114    795 	C$main.c$148$3$3 ==.
                            796 ;	main.c:148: if (free_slots > 0) {    
   0114 E5*01               797 	mov	a,_free_slots
   0116 45*02               798 	orl	a,(_free_slots + 1)
   0118 60 09               799 	jz	00107$
                    011A    800 	C$main.c$149$4$4 ==.
                            801 ;	main.c:149: free_slots--;
   011A 15*01               802 	dec	_free_slots
   011C 74 FF               803 	mov	a,#0xff
   011E B5*01 02            804 	cjne	a,_free_slots,00115$
   0121 15*02               805 	dec	(_free_slots + 1)
   0123                     806 00115$:
   0123                     807 00107$:
                    0123    808 	C$main.c$153$1$1 ==.
                    0123    809 	XG$check_incoming$0$0 ==.
   0123 22                  810 	ret
                            811 ;------------------------------------------------------------
                            812 ;Allocation info for local variables in function 'main'
                            813 ;------------------------------------------------------------
                            814 ;------------------------------------------------------------
                    0124    815 	G$main$0$0 ==.
                    0124    816 	C$main.c$156$1$1 ==.
                            817 ;	main.c:156: void main (void) {
                            818 ;	-----------------------------------------
                            819 ;	 function main
                            820 ;	-----------------------------------------
   0124                     821 _main:
                    0124    822 	C$main.c$157$1$1 ==.
                            823 ;	main.c:157: init(); // Initialize
   0124 12s00r00            824 	lcall	_init
                    0127    825 	C$main.c$159$1$1 ==.
                            826 ;	main.c:159: while (1) {
   0127                     827 00102$:
                    0127    828 	C$main.c$161$2$2 ==.
                            829 ;	main.c:161: check_incoming(); // Car enters
   0127 12s01r0B            830 	lcall	_check_incoming
                    012A    831 	C$main.c$163$2$2 ==.
                            832 ;	main.c:163: check_outgoing(); // Car leaves
   012A 12s00rEE            833 	lcall	_check_outgoing
                    012D    834 	C$main.c$170$2$2 ==.
                            835 ;	main.c:170: for (cycle_delay = 0; cycle_delay < cycle_duration; cycle_delay++);
   012D E4                  836 	clr	a
   012E F5*0F               837 	mov	_cycle_delay,a
   0130 F5*10               838 	mov	(_cycle_delay + 1),a
   0132 F5*11               839 	mov	(_cycle_delay + 2),a
   0134 F5*12               840 	mov	(_cycle_delay + 3),a
   0136                     841 00104$:
   0136 C3                  842 	clr	c
   0137 E5*0F               843 	mov	a,_cycle_delay
   0139 95*13               844 	subb	a,_cycle_duration
   013B E5*10               845 	mov	a,(_cycle_delay + 1)
   013D 95*14               846 	subb	a,(_cycle_duration + 1)
   013F E5*11               847 	mov	a,(_cycle_delay + 2)
   0141 95*15               848 	subb	a,(_cycle_duration + 2)
   0143 E5*12               849 	mov	a,(_cycle_delay + 3)
   0145 95*16               850 	subb	a,(_cycle_duration + 3)
   0147 50 14               851 	jnc	00107$
   0149 05*0F               852 	inc	_cycle_delay
   014B E4                  853 	clr	a
   014C B5*0F E7            854 	cjne	a,_cycle_delay,00104$
   014F 05*10               855 	inc	(_cycle_delay + 1)
   0151 B5*10 E2            856 	cjne	a,(_cycle_delay + 1),00104$
   0154 05*11               857 	inc	(_cycle_delay + 2)
   0156 B5*11 DD            858 	cjne	a,(_cycle_delay + 2),00104$
   0159 05*12               859 	inc	(_cycle_delay + 3)
   015B 80 D9               860 	sjmp	00104$
   015D                     861 00107$:
                    015D    862 	C$main.c$172$2$2 ==.
                            863 ;	main.c:172: display(free_slots); // Output the number of free slots
   015D 85*01 82            864 	mov	dpl,_free_slots
   0160 85*02 83            865 	mov	dph,(_free_slots + 1)
   0163 12s00r8B            866 	lcall	_display
                    0166    867 	C$main.c$174$1$1 ==.
                    0166    868 	XG$main$0$0 ==.
   0166 80 BF               869 	sjmp	00102$
                            870 	.area CSEG    (CODE)
                            871 	.area CONST   (CODE)
                            872 	.area XINIT   (CODE)
                            873 	.area CABS    (ABS,CODE)
