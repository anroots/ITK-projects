                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (Oct 31 2010) (MINGW32)
                              4 ; This file was generated Mon Nov 07 22:48:09 2011
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _init
                             14 	.globl _check_start_press
                             15 	.globl _bounce_delay
                             16 	.globl _reset_display
                             17 	.globl _display
                             18 	.globl _get_digit
                             19 	.globl _write_segment
                             20 	.globl _GetNumberFromMatrixKeypad
                             21 	.globl _CY
                             22 	.globl _AC
                             23 	.globl _F0
                             24 	.globl _RS1
                             25 	.globl _RS0
                             26 	.globl _OV
                             27 	.globl _F1
                             28 	.globl _P
                             29 	.globl _PS
                             30 	.globl _PT1
                             31 	.globl _PX1
                             32 	.globl _PT0
                             33 	.globl _PX0
                             34 	.globl _RD
                             35 	.globl _WR
                             36 	.globl _T1
                             37 	.globl _T0
                             38 	.globl _INT1
                             39 	.globl _INT0
                             40 	.globl _TXD
                             41 	.globl _RXD
                             42 	.globl _P3_7
                             43 	.globl _P3_6
                             44 	.globl _P3_5
                             45 	.globl _P3_4
                             46 	.globl _P3_3
                             47 	.globl _P3_2
                             48 	.globl _P3_1
                             49 	.globl _P3_0
                             50 	.globl _EA
                             51 	.globl _ES
                             52 	.globl _ET1
                             53 	.globl _EX1
                             54 	.globl _ET0
                             55 	.globl _EX0
                             56 	.globl _P2_7
                             57 	.globl _P2_6
                             58 	.globl _P2_5
                             59 	.globl _P2_4
                             60 	.globl _P2_3
                             61 	.globl _P2_2
                             62 	.globl _P2_1
                             63 	.globl _P2_0
                             64 	.globl _SM0
                             65 	.globl _SM1
                             66 	.globl _SM2
                             67 	.globl _REN
                             68 	.globl _TB8
                             69 	.globl _RB8
                             70 	.globl _TI
                             71 	.globl _RI
                             72 	.globl _P1_7
                             73 	.globl _P1_6
                             74 	.globl _P1_5
                             75 	.globl _P1_4
                             76 	.globl _P1_3
                             77 	.globl _P1_2
                             78 	.globl _P1_1
                             79 	.globl _P1_0
                             80 	.globl _TF1
                             81 	.globl _TR1
                             82 	.globl _TF0
                             83 	.globl _TR0
                             84 	.globl _IE1
                             85 	.globl _IT1
                             86 	.globl _IE0
                             87 	.globl _IT0
                             88 	.globl _P0_7
                             89 	.globl _P0_6
                             90 	.globl _P0_5
                             91 	.globl _P0_4
                             92 	.globl _P0_3
                             93 	.globl _P0_2
                             94 	.globl _P0_1
                             95 	.globl _P0_0
                             96 	.globl _B
                             97 	.globl _ACC
                             98 	.globl _PSW
                             99 	.globl _IP
                            100 	.globl _P3
                            101 	.globl _IE
                            102 	.globl _P2
                            103 	.globl _SBUF
                            104 	.globl _SCON
                            105 	.globl _P1
                            106 	.globl _TH1
                            107 	.globl _TH0
                            108 	.globl _TL1
                            109 	.globl _TL0
                            110 	.globl _TMOD
                            111 	.globl _TCON
                            112 	.globl _PCON
                            113 	.globl _DPH
                            114 	.globl _DPL
                            115 	.globl _SP
                            116 	.globl _P0
                            117 	.globl _get_digit_PARM_2
                            118 	.globl _write_segment_PARM_2
                            119 	.globl _cycle_duration
                            120 	.globl _cycle_delay
                            121 	.globl _NUMBERS
                            122 	.globl _NUMBER_OF_DIGITS
                            123 ;--------------------------------------------------------
                            124 ; special function registers
                            125 ;--------------------------------------------------------
                            126 	.area RSEG    (ABS,DATA)
   0000                     127 	.org 0x0000
                    0080    128 G$P0$0$0 == 0x0080
                    0080    129 _P0	=	0x0080
                    0081    130 G$SP$0$0 == 0x0081
                    0081    131 _SP	=	0x0081
                    0082    132 G$DPL$0$0 == 0x0082
                    0082    133 _DPL	=	0x0082
                    0083    134 G$DPH$0$0 == 0x0083
                    0083    135 _DPH	=	0x0083
                    0087    136 G$PCON$0$0 == 0x0087
                    0087    137 _PCON	=	0x0087
                    0088    138 G$TCON$0$0 == 0x0088
                    0088    139 _TCON	=	0x0088
                    0089    140 G$TMOD$0$0 == 0x0089
                    0089    141 _TMOD	=	0x0089
                    008A    142 G$TL0$0$0 == 0x008a
                    008A    143 _TL0	=	0x008a
                    008B    144 G$TL1$0$0 == 0x008b
                    008B    145 _TL1	=	0x008b
                    008C    146 G$TH0$0$0 == 0x008c
                    008C    147 _TH0	=	0x008c
                    008D    148 G$TH1$0$0 == 0x008d
                    008D    149 _TH1	=	0x008d
                    0090    150 G$P1$0$0 == 0x0090
                    0090    151 _P1	=	0x0090
                    0098    152 G$SCON$0$0 == 0x0098
                    0098    153 _SCON	=	0x0098
                    0099    154 G$SBUF$0$0 == 0x0099
                    0099    155 _SBUF	=	0x0099
                    00A0    156 G$P2$0$0 == 0x00a0
                    00A0    157 _P2	=	0x00a0
                    00A8    158 G$IE$0$0 == 0x00a8
                    00A8    159 _IE	=	0x00a8
                    00B0    160 G$P3$0$0 == 0x00b0
                    00B0    161 _P3	=	0x00b0
                    00B8    162 G$IP$0$0 == 0x00b8
                    00B8    163 _IP	=	0x00b8
                    00D0    164 G$PSW$0$0 == 0x00d0
                    00D0    165 _PSW	=	0x00d0
                    00E0    166 G$ACC$0$0 == 0x00e0
                    00E0    167 _ACC	=	0x00e0
                    00F0    168 G$B$0$0 == 0x00f0
                    00F0    169 _B	=	0x00f0
                            170 ;--------------------------------------------------------
                            171 ; special function bits
                            172 ;--------------------------------------------------------
                            173 	.area RSEG    (ABS,DATA)
   0000                     174 	.org 0x0000
                    0080    175 G$P0_0$0$0 == 0x0080
                    0080    176 _P0_0	=	0x0080
                    0081    177 G$P0_1$0$0 == 0x0081
                    0081    178 _P0_1	=	0x0081
                    0082    179 G$P0_2$0$0 == 0x0082
                    0082    180 _P0_2	=	0x0082
                    0083    181 G$P0_3$0$0 == 0x0083
                    0083    182 _P0_3	=	0x0083
                    0084    183 G$P0_4$0$0 == 0x0084
                    0084    184 _P0_4	=	0x0084
                    0085    185 G$P0_5$0$0 == 0x0085
                    0085    186 _P0_5	=	0x0085
                    0086    187 G$P0_6$0$0 == 0x0086
                    0086    188 _P0_6	=	0x0086
                    0087    189 G$P0_7$0$0 == 0x0087
                    0087    190 _P0_7	=	0x0087
                    0088    191 G$IT0$0$0 == 0x0088
                    0088    192 _IT0	=	0x0088
                    0089    193 G$IE0$0$0 == 0x0089
                    0089    194 _IE0	=	0x0089
                    008A    195 G$IT1$0$0 == 0x008a
                    008A    196 _IT1	=	0x008a
                    008B    197 G$IE1$0$0 == 0x008b
                    008B    198 _IE1	=	0x008b
                    008C    199 G$TR0$0$0 == 0x008c
                    008C    200 _TR0	=	0x008c
                    008D    201 G$TF0$0$0 == 0x008d
                    008D    202 _TF0	=	0x008d
                    008E    203 G$TR1$0$0 == 0x008e
                    008E    204 _TR1	=	0x008e
                    008F    205 G$TF1$0$0 == 0x008f
                    008F    206 _TF1	=	0x008f
                    0090    207 G$P1_0$0$0 == 0x0090
                    0090    208 _P1_0	=	0x0090
                    0091    209 G$P1_1$0$0 == 0x0091
                    0091    210 _P1_1	=	0x0091
                    0092    211 G$P1_2$0$0 == 0x0092
                    0092    212 _P1_2	=	0x0092
                    0093    213 G$P1_3$0$0 == 0x0093
                    0093    214 _P1_3	=	0x0093
                    0094    215 G$P1_4$0$0 == 0x0094
                    0094    216 _P1_4	=	0x0094
                    0095    217 G$P1_5$0$0 == 0x0095
                    0095    218 _P1_5	=	0x0095
                    0096    219 G$P1_6$0$0 == 0x0096
                    0096    220 _P1_6	=	0x0096
                    0097    221 G$P1_7$0$0 == 0x0097
                    0097    222 _P1_7	=	0x0097
                    0098    223 G$RI$0$0 == 0x0098
                    0098    224 _RI	=	0x0098
                    0099    225 G$TI$0$0 == 0x0099
                    0099    226 _TI	=	0x0099
                    009A    227 G$RB8$0$0 == 0x009a
                    009A    228 _RB8	=	0x009a
                    009B    229 G$TB8$0$0 == 0x009b
                    009B    230 _TB8	=	0x009b
                    009C    231 G$REN$0$0 == 0x009c
                    009C    232 _REN	=	0x009c
                    009D    233 G$SM2$0$0 == 0x009d
                    009D    234 _SM2	=	0x009d
                    009E    235 G$SM1$0$0 == 0x009e
                    009E    236 _SM1	=	0x009e
                    009F    237 G$SM0$0$0 == 0x009f
                    009F    238 _SM0	=	0x009f
                    00A0    239 G$P2_0$0$0 == 0x00a0
                    00A0    240 _P2_0	=	0x00a0
                    00A1    241 G$P2_1$0$0 == 0x00a1
                    00A1    242 _P2_1	=	0x00a1
                    00A2    243 G$P2_2$0$0 == 0x00a2
                    00A2    244 _P2_2	=	0x00a2
                    00A3    245 G$P2_3$0$0 == 0x00a3
                    00A3    246 _P2_3	=	0x00a3
                    00A4    247 G$P2_4$0$0 == 0x00a4
                    00A4    248 _P2_4	=	0x00a4
                    00A5    249 G$P2_5$0$0 == 0x00a5
                    00A5    250 _P2_5	=	0x00a5
                    00A6    251 G$P2_6$0$0 == 0x00a6
                    00A6    252 _P2_6	=	0x00a6
                    00A7    253 G$P2_7$0$0 == 0x00a7
                    00A7    254 _P2_7	=	0x00a7
                    00A8    255 G$EX0$0$0 == 0x00a8
                    00A8    256 _EX0	=	0x00a8
                    00A9    257 G$ET0$0$0 == 0x00a9
                    00A9    258 _ET0	=	0x00a9
                    00AA    259 G$EX1$0$0 == 0x00aa
                    00AA    260 _EX1	=	0x00aa
                    00AB    261 G$ET1$0$0 == 0x00ab
                    00AB    262 _ET1	=	0x00ab
                    00AC    263 G$ES$0$0 == 0x00ac
                    00AC    264 _ES	=	0x00ac
                    00AF    265 G$EA$0$0 == 0x00af
                    00AF    266 _EA	=	0x00af
                    00B0    267 G$P3_0$0$0 == 0x00b0
                    00B0    268 _P3_0	=	0x00b0
                    00B1    269 G$P3_1$0$0 == 0x00b1
                    00B1    270 _P3_1	=	0x00b1
                    00B2    271 G$P3_2$0$0 == 0x00b2
                    00B2    272 _P3_2	=	0x00b2
                    00B3    273 G$P3_3$0$0 == 0x00b3
                    00B3    274 _P3_3	=	0x00b3
                    00B4    275 G$P3_4$0$0 == 0x00b4
                    00B4    276 _P3_4	=	0x00b4
                    00B5    277 G$P3_5$0$0 == 0x00b5
                    00B5    278 _P3_5	=	0x00b5
                    00B6    279 G$P3_6$0$0 == 0x00b6
                    00B6    280 _P3_6	=	0x00b6
                    00B7    281 G$P3_7$0$0 == 0x00b7
                    00B7    282 _P3_7	=	0x00b7
                    00B0    283 G$RXD$0$0 == 0x00b0
                    00B0    284 _RXD	=	0x00b0
                    00B1    285 G$TXD$0$0 == 0x00b1
                    00B1    286 _TXD	=	0x00b1
                    00B2    287 G$INT0$0$0 == 0x00b2
                    00B2    288 _INT0	=	0x00b2
                    00B3    289 G$INT1$0$0 == 0x00b3
                    00B3    290 _INT1	=	0x00b3
                    00B4    291 G$T0$0$0 == 0x00b4
                    00B4    292 _T0	=	0x00b4
                    00B5    293 G$T1$0$0 == 0x00b5
                    00B5    294 _T1	=	0x00b5
                    00B6    295 G$WR$0$0 == 0x00b6
                    00B6    296 _WR	=	0x00b6
                    00B7    297 G$RD$0$0 == 0x00b7
                    00B7    298 _RD	=	0x00b7
                    00B8    299 G$PX0$0$0 == 0x00b8
                    00B8    300 _PX0	=	0x00b8
                    00B9    301 G$PT0$0$0 == 0x00b9
                    00B9    302 _PT0	=	0x00b9
                    00BA    303 G$PX1$0$0 == 0x00ba
                    00BA    304 _PX1	=	0x00ba
                    00BB    305 G$PT1$0$0 == 0x00bb
                    00BB    306 _PT1	=	0x00bb
                    00BC    307 G$PS$0$0 == 0x00bc
                    00BC    308 _PS	=	0x00bc
                    00D0    309 G$P$0$0 == 0x00d0
                    00D0    310 _P	=	0x00d0
                    00D1    311 G$F1$0$0 == 0x00d1
                    00D1    312 _F1	=	0x00d1
                    00D2    313 G$OV$0$0 == 0x00d2
                    00D2    314 _OV	=	0x00d2
                    00D3    315 G$RS0$0$0 == 0x00d3
                    00D3    316 _RS0	=	0x00d3
                    00D4    317 G$RS1$0$0 == 0x00d4
                    00D4    318 _RS1	=	0x00d4
                    00D5    319 G$F0$0$0 == 0x00d5
                    00D5    320 _F0	=	0x00d5
                    00D6    321 G$AC$0$0 == 0x00d6
                    00D6    322 _AC	=	0x00d6
                    00D7    323 G$CY$0$0 == 0x00d7
                    00D7    324 _CY	=	0x00d7
                            325 ;--------------------------------------------------------
                            326 ; overlayable register banks
                            327 ;--------------------------------------------------------
                            328 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     329 	.ds 8
                            330 ;--------------------------------------------------------
                            331 ; internal ram data
                            332 ;--------------------------------------------------------
                            333 	.area DSEG    (DATA)
                    0000    334 G$NUMBER_OF_DIGITS$0$0==.
   0000                     335 _NUMBER_OF_DIGITS::
   0000                     336 	.ds 1
                    0001    337 G$NUMBERS$0$0==.
   0001                     338 _NUMBERS::
   0001                     339 	.ds 10
                    000B    340 G$cycle_delay$0$0==.
   000B                     341 _cycle_delay::
   000B                     342 	.ds 4
                    000F    343 G$cycle_duration$0$0==.
   000F                     344 _cycle_duration::
   000F                     345 	.ds 4
                    0013    346 Lwrite_segment$value$1$1==.
   0013                     347 _write_segment_PARM_2:
   0013                     348 	.ds 1
                    0014    349 Lget_digit$place$1$1==.
   0014                     350 _get_digit_PARM_2:
   0014                     351 	.ds 1
                            352 ;--------------------------------------------------------
                            353 ; overlayable items in internal ram 
                            354 ;--------------------------------------------------------
                            355 	.area OSEG    (OVR,DATA)
                            356 ;--------------------------------------------------------
                            357 ; Stack segment in internal ram 
                            358 ;--------------------------------------------------------
                            359 	.area	SSEG	(DATA)
   0000                     360 __start__stack:
   0000                     361 	.ds	1
                            362 
                            363 ;--------------------------------------------------------
                            364 ; indirectly addressable internal ram data
                            365 ;--------------------------------------------------------
                            366 	.area ISEG    (DATA)
                            367 ;--------------------------------------------------------
                            368 ; absolute internal ram data
                            369 ;--------------------------------------------------------
                            370 	.area IABS    (ABS,DATA)
                            371 	.area IABS    (ABS,DATA)
                            372 ;--------------------------------------------------------
                            373 ; bit data
                            374 ;--------------------------------------------------------
                            375 	.area BSEG    (BIT)
                            376 ;--------------------------------------------------------
                            377 ; paged external ram data
                            378 ;--------------------------------------------------------
                            379 	.area PSEG    (PAG,XDATA)
                            380 ;--------------------------------------------------------
                            381 ; external ram data
                            382 ;--------------------------------------------------------
                            383 	.area XSEG    (XDATA)
                            384 ;--------------------------------------------------------
                            385 ; absolute external ram data
                            386 ;--------------------------------------------------------
                            387 	.area XABS    (ABS,XDATA)
                            388 ;--------------------------------------------------------
                            389 ; external initialized ram data
                            390 ;--------------------------------------------------------
                            391 	.area XISEG   (XDATA)
                            392 	.area HOME    (CODE)
                            393 	.area GSINIT0 (CODE)
                            394 	.area GSINIT1 (CODE)
                            395 	.area GSINIT2 (CODE)
                            396 	.area GSINIT3 (CODE)
                            397 	.area GSINIT4 (CODE)
                            398 	.area GSINIT5 (CODE)
                            399 	.area GSINIT  (CODE)
                            400 	.area GSFINAL (CODE)
                            401 	.area CSEG    (CODE)
                            402 ;--------------------------------------------------------
                            403 ; interrupt vector 
                            404 ;--------------------------------------------------------
                            405 	.area HOME    (CODE)
   0000                     406 __interrupt_vect:
   0000 02s00r00            407 	ljmp	__sdcc_gsinit_startup
                            408 ;--------------------------------------------------------
                            409 ; global & static initialisations
                            410 ;--------------------------------------------------------
                            411 	.area HOME    (CODE)
                            412 	.area GSINIT  (CODE)
                            413 	.area GSFINAL (CODE)
                            414 	.area GSINIT  (CODE)
                            415 	.globl __sdcc_gsinit_startup
                            416 	.globl __sdcc_program_startup
                            417 	.globl __start__stack
                            418 	.globl __mcs51_genXINIT
                            419 	.globl __mcs51_genXRAMCLEAR
                            420 	.globl __mcs51_genRAMCLEAR
                    0000    421 	G$main$0$0 ==.
                    0000    422 	C$main.c$22$1$1 ==.
                            423 ;	main.c:22: unsigned char NUMBER_OF_DIGITS = 4;
   0000 75*00 04            424 	mov	_NUMBER_OF_DIGITS,#0x04
                    0003    425 	G$main$0$0 ==.
                    0003    426 	C$main.c$25$1$1 ==.
                            427 ;	main.c:25: unsigned char NUMBERS [] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99,
   0003 75*01 C0            428 	mov	_NUMBERS,#0xC0
   0006 75*02 F9            429 	mov	(_NUMBERS + 0x0001),#0xF9
   0009 75*03 A4            430 	mov	(_NUMBERS + 0x0002),#0xA4
   000C 75*04 B0            431 	mov	(_NUMBERS + 0x0003),#0xB0
   000F 75*05 99            432 	mov	(_NUMBERS + 0x0004),#0x99
   0012 75*06 92            433 	mov	(_NUMBERS + 0x0005),#0x92
   0015 75*07 82            434 	mov	(_NUMBERS + 0x0006),#0x82
   0018 75*08 F0            435 	mov	(_NUMBERS + 0x0007),#0xF0
   001B 75*09 80            436 	mov	(_NUMBERS + 0x0008),#0x80
   001E 75*0A 90            437 	mov	(_NUMBERS + 0x0009),#0x90
                            438 	.area GSFINAL (CODE)
   0000 02s00r03            439 	ljmp	__sdcc_program_startup
                            440 ;--------------------------------------------------------
                            441 ; Home
                            442 ;--------------------------------------------------------
                            443 	.area HOME    (CODE)
                            444 	.area HOME    (CODE)
   0003                     445 __sdcc_program_startup:
   0003 12s02r57            446 	lcall	_main
                            447 ;	return from main will lock up
   0006 80 FE               448 	sjmp .
                            449 ;--------------------------------------------------------
                            450 ; code
                            451 ;--------------------------------------------------------
                            452 	.area CSEG    (CODE)
                            453 ;------------------------------------------------------------
                            454 ;Allocation info for local variables in function 'GetNumberFromMatrixKeypad'
                            455 ;------------------------------------------------------------
                            456 ;col                       Allocated to registers r2 
                            457 ;row                       Allocated to registers r3 
                            458 ;------------------------------------------------------------
                    0000    459 	G$GetNumberFromMatrixKeypad$0$0 ==.
                    0000    460 	C$main.c$36$0$0 ==.
                            461 ;	main.c:36: unsigned char GetNumberFromMatrixKeypad()
                            462 ;	-----------------------------------------
                            463 ;	 function GetNumberFromMatrixKeypad
                            464 ;	-----------------------------------------
   0000                     465 _GetNumberFromMatrixKeypad:
                    0002    466 	ar2 = 0x02
                    0003    467 	ar3 = 0x03
                    0004    468 	ar4 = 0x04
                    0005    469 	ar5 = 0x05
                    0006    470 	ar6 = 0x06
                    0007    471 	ar7 = 0x07
                    0000    472 	ar0 = 0x00
                    0001    473 	ar1 = 0x01
                    0000    474 	C$main.c$38$1$0 ==.
                            475 ;	main.c:38: unsigned char col = 0, row = 0;
   0000 7A 00               476 	mov	r2,#0x00
   0002 7B 00               477 	mov	r3,#0x00
                    0004    478 	C$main.c$39$1$1 ==.
                            479 ;	main.c:39: KEYPAD_PORT = 240;    //column info
   0004 75 90 F0            480 	mov	_P1,#0xF0
                    0007    481 	C$main.c$40$1$1 ==.
                            482 ;	main.c:40: switch(P1)
   0007 AC 90               483 	mov	r4,_P1
   0009 BC 70 02            484 	cjne	r4,#0x70,00219$
   000C 80 19               485 	sjmp	00104$
   000E                     486 00219$:
   000E BC B0 02            487 	cjne	r4,#0xB0,00220$
   0011 80 10               488 	sjmp	00103$
   0013                     489 00220$:
   0013 BC D0 02            490 	cjne	r4,#0xD0,00221$
   0016 80 07               491 	sjmp	00102$
   0018                     492 00221$:
   0018 BC E0 0E            493 	cjne	r4,#0xE0,00106$
                    001B    494 	C$main.c$42$2$2 ==.
                            495 ;	main.c:42: case 224:    col = 1;    break;   
   001B 7A 01               496 	mov	r2,#0x01
                    001D    497 	C$main.c$43$2$2 ==.
                            498 ;	main.c:43: case 208:    col = 2;    break;    
   001D 80 0A               499 	sjmp	00106$
   001F                     500 00102$:
   001F 7A 02               501 	mov	r2,#0x02
                    0021    502 	C$main.c$44$2$2 ==.
                            503 ;	main.c:44: case 176:    col = 3;    break;    
   0021 80 06               504 	sjmp	00106$
   0023                     505 00103$:
   0023 7A 03               506 	mov	r2,#0x03
                    0025    507 	C$main.c$45$2$2 ==.
                            508 ;	main.c:45: case 112:    col = 4;    break;    
   0025 80 02               509 	sjmp	00106$
   0027                     510 00104$:
   0027 7A 04               511 	mov	r2,#0x04
                    0029    512 	C$main.c$47$1$1 ==.
                            513 ;	main.c:47: }
   0029                     514 00106$:
                    0029    515 	C$main.c$49$1$1 ==.
                            516 ;	main.c:49: KEYPAD_PORT = 15;    //row info
   0029 75 90 0F            517 	mov	_P1,#0x0F
                    002C    518 	C$main.c$50$1$1 ==.
                            519 ;	main.c:50: switch(P1)
   002C AC 90               520 	mov	r4,_P1
   002E BC 07 02            521 	cjne	r4,#0x07,00224$
   0031 80 19               522 	sjmp	00110$
   0033                     523 00224$:
   0033 BC 0B 02            524 	cjne	r4,#0x0B,00225$
   0036 80 10               525 	sjmp	00109$
   0038                     526 00225$:
   0038 BC 0D 02            527 	cjne	r4,#0x0D,00226$
   003B 80 07               528 	sjmp	00108$
   003D                     529 00226$:
   003D BC 0E 0E            530 	cjne	r4,#0x0E,00112$
                    0040    531 	C$main.c$52$2$3 ==.
                            532 ;	main.c:52: case 14:    row = 1;    break;
   0040 7B 01               533 	mov	r3,#0x01
                    0042    534 	C$main.c$53$2$3 ==.
                            535 ;	main.c:53: case 13:    row = 2;    break;
   0042 80 0A               536 	sjmp	00112$
   0044                     537 00108$:
   0044 7B 02               538 	mov	r3,#0x02
                    0046    539 	C$main.c$54$2$3 ==.
                            540 ;	main.c:54: case 11:    row = 3;    break;
   0046 80 06               541 	sjmp	00112$
   0048                     542 00109$:
   0048 7B 03               543 	mov	r3,#0x03
                    004A    544 	C$main.c$55$2$3 ==.
                            545 ;	main.c:55: case 7:    row = 4;    break;
   004A 80 02               546 	sjmp	00112$
   004C                     547 00110$:
   004C 7B 04               548 	mov	r3,#0x04
                    004E    549 	C$main.c$57$1$1 ==.
                            550 ;	main.c:57: }
   004E                     551 00112$:
                    004E    552 	C$main.c$59$1$1 ==.
                            553 ;	main.c:59: if((col == 1) && (row == 1))
   004E E4                  554 	clr	a
   004F BA 01 01            555 	cjne	r2,#0x01,00229$
   0052 04                  556 	inc	a
   0053                     557 00229$:
   0053 FC                  558 	mov	r4,a
   0054 60 07               559 	jz	00174$
   0056 BB 01 04            560 	cjne	r3,#0x01,00174$
                    0059    561 	C$main.c$60$1$1 ==.
                            562 ;	main.c:60: return 1;
   0059 75 82 01            563 	mov	dpl,#0x01
   005C 22                  564 	ret
   005D                     565 00174$:
                    005D    566 	C$main.c$61$1$1 ==.
                            567 ;	main.c:61: else if((col == 2) && (row == 1))
   005D E4                  568 	clr	a
   005E BA 02 01            569 	cjne	r2,#0x02,00234$
   0061 04                  570 	inc	a
   0062                     571 00234$:
   0062 FD                  572 	mov	r5,a
   0063 60 07               573 	jz	00170$
   0065 BB 01 04            574 	cjne	r3,#0x01,00170$
                    0068    575 	C$main.c$62$1$1 ==.
                            576 ;	main.c:62: return 2;
   0068 75 82 02            577 	mov	dpl,#0x02
   006B 22                  578 	ret
   006C                     579 00170$:
                    006C    580 	C$main.c$63$1$1 ==.
                            581 ;	main.c:63: else if((col == 3) && (row == 1))
   006C E4                  582 	clr	a
   006D BA 03 01            583 	cjne	r2,#0x03,00239$
   0070 04                  584 	inc	a
   0071                     585 00239$:
   0071 FE                  586 	mov	r6,a
   0072 60 07               587 	jz	00166$
   0074 BB 01 04            588 	cjne	r3,#0x01,00166$
                    0077    589 	C$main.c$64$1$1 ==.
                            590 ;	main.c:64: return 3;
   0077 75 82 03            591 	mov	dpl,#0x03
   007A 22                  592 	ret
   007B                     593 00166$:
                    007B    594 	C$main.c$65$1$1 ==.
                            595 ;	main.c:65: else if((col == 4) && (row == 1))    //Letter A
   007B E4                  596 	clr	a
   007C BA 04 01            597 	cjne	r2,#0x04,00244$
   007F 04                  598 	inc	a
   0080                     599 00244$:
   0080 FA                  600 	mov	r2,a
   0081 60 07               601 	jz	00162$
   0083 BB 01 04            602 	cjne	r3,#0x01,00162$
                    0086    603 	C$main.c$66$1$1 ==.
                            604 ;	main.c:66: return 10;
   0086 75 82 0A            605 	mov	dpl,#0x0A
   0089 22                  606 	ret
   008A                     607 00162$:
                    008A    608 	C$main.c$67$1$1 ==.
                            609 ;	main.c:67: else if((col == 1) && (row == 2))
   008A EC                  610 	mov	a,r4
   008B 60 07               611 	jz	00158$
   008D BB 02 04            612 	cjne	r3,#0x02,00158$
                    0090    613 	C$main.c$68$1$1 ==.
                            614 ;	main.c:68: return 4;
   0090 75 82 04            615 	mov	dpl,#0x04
   0093 22                  616 	ret
   0094                     617 00158$:
                    0094    618 	C$main.c$69$1$1 ==.
                            619 ;	main.c:69: else if((col == 2) && (row == 2))
   0094 ED                  620 	mov	a,r5
   0095 60 07               621 	jz	00154$
   0097 BB 02 04            622 	cjne	r3,#0x02,00154$
                    009A    623 	C$main.c$70$1$1 ==.
                            624 ;	main.c:70: return 5;
   009A 75 82 05            625 	mov	dpl,#0x05
   009D 22                  626 	ret
   009E                     627 00154$:
                    009E    628 	C$main.c$71$1$1 ==.
                            629 ;	main.c:71: else if((col == 3) && (row == 2))
   009E EE                  630 	mov	a,r6
   009F 60 07               631 	jz	00150$
   00A1 BB 02 04            632 	cjne	r3,#0x02,00150$
                    00A4    633 	C$main.c$72$1$1 ==.
                            634 ;	main.c:72: return 6;
   00A4 75 82 06            635 	mov	dpl,#0x06
   00A7 22                  636 	ret
   00A8                     637 00150$:
                    00A8    638 	C$main.c$73$1$1 ==.
                            639 ;	main.c:73: else if((col == 4) && (row == 2))    //Letter B
   00A8 EA                  640 	mov	a,r2
   00A9 60 07               641 	jz	00146$
   00AB BB 02 04            642 	cjne	r3,#0x02,00146$
                    00AE    643 	C$main.c$74$1$1 ==.
                            644 ;	main.c:74: return 11;
   00AE 75 82 0B            645 	mov	dpl,#0x0B
   00B1 22                  646 	ret
   00B2                     647 00146$:
                    00B2    648 	C$main.c$75$1$1 ==.
                            649 ;	main.c:75: else if((col == 1) && (row == 3))
   00B2 EC                  650 	mov	a,r4
   00B3 60 07               651 	jz	00142$
   00B5 BB 03 04            652 	cjne	r3,#0x03,00142$
                    00B8    653 	C$main.c$76$1$1 ==.
                            654 ;	main.c:76: return 7;
   00B8 75 82 07            655 	mov	dpl,#0x07
   00BB 22                  656 	ret
   00BC                     657 00142$:
                    00BC    658 	C$main.c$77$1$1 ==.
                            659 ;	main.c:77: else if((col == 2) && (row == 3))
   00BC ED                  660 	mov	a,r5
   00BD 60 07               661 	jz	00138$
   00BF BB 03 04            662 	cjne	r3,#0x03,00138$
                    00C2    663 	C$main.c$78$1$1 ==.
                            664 ;	main.c:78: return 8;
   00C2 75 82 08            665 	mov	dpl,#0x08
   00C5 22                  666 	ret
   00C6                     667 00138$:
                    00C6    668 	C$main.c$79$1$1 ==.
                            669 ;	main.c:79: else if((col == 3) && (row == 3))
   00C6 EE                  670 	mov	a,r6
   00C7 60 07               671 	jz	00134$
   00C9 BB 03 04            672 	cjne	r3,#0x03,00134$
                    00CC    673 	C$main.c$80$1$1 ==.
                            674 ;	main.c:80: return 9;
   00CC 75 82 09            675 	mov	dpl,#0x09
   00CF 22                  676 	ret
   00D0                     677 00134$:
                    00D0    678 	C$main.c$81$1$1 ==.
                            679 ;	main.c:81: else if((col == 4) && (row == 3))    //Letter C
   00D0 EA                  680 	mov	a,r2
   00D1 60 07               681 	jz	00130$
   00D3 BB 03 04            682 	cjne	r3,#0x03,00130$
                    00D6    683 	C$main.c$82$1$1 ==.
                            684 ;	main.c:82: return 12;
   00D6 75 82 0C            685 	mov	dpl,#0x0C
   00D9 22                  686 	ret
   00DA                     687 00130$:
                    00DA    688 	C$main.c$83$1$1 ==.
                            689 ;	main.c:83: else if((col == 1) && (row == 4))    //Char * (ASCII 42)
   00DA EC                  690 	mov	a,r4
   00DB 60 07               691 	jz	00126$
   00DD BB 04 04            692 	cjne	r3,#0x04,00126$
                    00E0    693 	C$main.c$84$1$1 ==.
                            694 ;	main.c:84: return 42;
   00E0 75 82 2A            695 	mov	dpl,#0x2A
   00E3 22                  696 	ret
   00E4                     697 00126$:
                    00E4    698 	C$main.c$85$1$1 ==.
                            699 ;	main.c:85: else if((col == 2) && (row == 4))
   00E4 ED                  700 	mov	a,r5
   00E5 60 07               701 	jz	00122$
   00E7 BB 04 04            702 	cjne	r3,#0x04,00122$
                    00EA    703 	C$main.c$86$1$1 ==.
                            704 ;	main.c:86: return 0;
   00EA 75 82 00            705 	mov	dpl,#0x00
   00ED 22                  706 	ret
   00EE                     707 00122$:
                    00EE    708 	C$main.c$87$1$1 ==.
                            709 ;	main.c:87: else if((col == 3) && (row == 4))    //Char # (ASCII 35)
   00EE EE                  710 	mov	a,r6
   00EF 60 07               711 	jz	00118$
   00F1 BB 04 04            712 	cjne	r3,#0x04,00118$
                    00F4    713 	C$main.c$88$1$1 ==.
                            714 ;	main.c:88: return 35;
   00F4 75 82 23            715 	mov	dpl,#0x23
   00F7 22                  716 	ret
   00F8                     717 00118$:
                    00F8    718 	C$main.c$89$1$1 ==.
                            719 ;	main.c:89: else if((col == 4) && (row == 4))    //Letter D
   00F8 EA                  720 	mov	a,r2
   00F9 60 07               721 	jz	00114$
   00FB BB 04 04            722 	cjne	r3,#0x04,00114$
                    00FE    723 	C$main.c$90$1$1 ==.
                            724 ;	main.c:90: return 13;
   00FE 75 82 0D            725 	mov	dpl,#0x0D
                    0101    726 	C$main.c$92$1$1 ==.
                            727 ;	main.c:92: return 255;
                    0101    728 	C$main.c$96$1$1 ==.
                    0101    729 	XG$GetNumberFromMatrixKeypad$0$0 ==.
   0101 22                  730 	ret
   0102                     731 00114$:
   0102 75 82 FF            732 	mov	dpl,#0xFF
   0105 22                  733 	ret
                            734 ;------------------------------------------------------------
                            735 ;Allocation info for local variables in function 'write_segment'
                            736 ;------------------------------------------------------------
                            737 ;value                     Allocated with name '_write_segment_PARM_2'
                            738 ;segment_number            Allocated to registers r2 
                            739 ;------------------------------------------------------------
                    0106    740 	G$write_segment$0$0 ==.
                    0106    741 	C$main.c$106$1$1 ==.
                            742 ;	main.c:106: void write_segment(unsigned char segment_number, unsigned char value) {
                            743 ;	-----------------------------------------
                            744 ;	 function write_segment
                            745 ;	-----------------------------------------
   0106                     746 _write_segment:
   0106 AA 82               747 	mov	r2,dpl
                    0108    748 	C$main.c$108$1$1 ==.
                            749 ;	main.c:108: P3_0 = 1; // Reset P3 to avoid flickers
   0108 D2 B0               750 	setb	_P3_0
                    010A    751 	C$main.c$109$1$1 ==.
                            752 ;	main.c:109: P3_1 = 1;
   010A D2 B1               753 	setb	_P3_1
                    010C    754 	C$main.c$110$1$1 ==.
                            755 ;	main.c:110: P3_2 = 1;
   010C D2 B2               756 	setb	_P3_2
                    010E    757 	C$main.c$111$1$1 ==.
                            758 ;	main.c:111: P3_3 = 1;
   010E D2 B3               759 	setb	_P3_3
                    0110    760 	C$main.c$114$1$1 ==.
                            761 ;	main.c:114: P2 = NUMBERS[value];
   0110 E5*13               762 	mov	a,_write_segment_PARM_2
   0112 24r01               763 	add	a,#_NUMBERS
   0114 F8                  764 	mov	r0,a
   0115 86 A0               765 	mov	_P2,@r0
                    0117    766 	C$main.c$117$1$1 ==.
                            767 ;	main.c:117: switch (segment_number) {
   0117 74 03               768 	mov	a,#0x03
   0119 B5 02 00            769 	cjne	a,ar2,00109$
   011C                     770 00109$:
   011C 40 36               771 	jc	00106$
   011E EA                  772 	mov	a,r2
   011F 2A                  773 	add	a,r2
   0120 2A                  774 	add	a,r2
   0121 90s01r25            775 	mov	dptr,#00111$
   0124 73                  776 	jmp	@a+dptr
   0125                     777 00111$:
   0125 02s01r31            778 	ljmp	00101$
   0128 02s01r3A            779 	ljmp	00102$
   012B 02s01r43            780 	ljmp	00103$
   012E 02s01r4C            781 	ljmp	00104$
                    0131    782 	C$main.c$118$2$2 ==.
                            783 ;	main.c:118: case 0:
   0131                     784 00101$:
                    0131    785 	C$main.c$119$2$2 ==.
                            786 ;	main.c:119: P3_1 = 1;
   0131 D2 B1               787 	setb	_P3_1
                    0133    788 	C$main.c$120$2$2 ==.
                            789 ;	main.c:120: P3_2 = 1;
   0133 D2 B2               790 	setb	_P3_2
                    0135    791 	C$main.c$121$2$2 ==.
                            792 ;	main.c:121: P3_3 = 1;
   0135 D2 B3               793 	setb	_P3_3
                    0137    794 	C$main.c$122$2$2 ==.
                            795 ;	main.c:122: P3_0 = 0;
   0137 C2 B0               796 	clr	_P3_0
                    0139    797 	C$main.c$123$2$2 ==.
                            798 ;	main.c:123: break;
                    0139    799 	C$main.c$124$2$2 ==.
                            800 ;	main.c:124: case 1:
   0139 22                  801 	ret
   013A                     802 00102$:
                    013A    803 	C$main.c$125$2$2 ==.
                            804 ;	main.c:125: P3_0 = 1;
   013A D2 B0               805 	setb	_P3_0
                    013C    806 	C$main.c$126$2$2 ==.
                            807 ;	main.c:126: P3_2 = 1;
   013C D2 B2               808 	setb	_P3_2
                    013E    809 	C$main.c$127$2$2 ==.
                            810 ;	main.c:127: P3_3 = 1;
   013E D2 B3               811 	setb	_P3_3
                    0140    812 	C$main.c$128$2$2 ==.
                            813 ;	main.c:128: P3_1 = 0;
   0140 C2 B1               814 	clr	_P3_1
                    0142    815 	C$main.c$129$2$2 ==.
                            816 ;	main.c:129: break;
                    0142    817 	C$main.c$130$2$2 ==.
                            818 ;	main.c:130: case 2:
   0142 22                  819 	ret
   0143                     820 00103$:
                    0143    821 	C$main.c$131$2$2 ==.
                            822 ;	main.c:131: P3_3 = 1;
   0143 D2 B3               823 	setb	_P3_3
                    0145    824 	C$main.c$132$2$2 ==.
                            825 ;	main.c:132: P3_1 = 1;
   0145 D2 B1               826 	setb	_P3_1
                    0147    827 	C$main.c$133$2$2 ==.
                            828 ;	main.c:133: P3_0 = 1;
   0147 D2 B0               829 	setb	_P3_0
                    0149    830 	C$main.c$134$2$2 ==.
                            831 ;	main.c:134: P3_2 = 0;
   0149 C2 B2               832 	clr	_P3_2
                    014B    833 	C$main.c$135$2$2 ==.
                            834 ;	main.c:135: break;
                    014B    835 	C$main.c$136$2$2 ==.
                            836 ;	main.c:136: case 3:
   014B 22                  837 	ret
   014C                     838 00104$:
                    014C    839 	C$main.c$137$2$2 ==.
                            840 ;	main.c:137: P3_0 = 1;
   014C D2 B0               841 	setb	_P3_0
                    014E    842 	C$main.c$138$2$2 ==.
                            843 ;	main.c:138: P3_1 = 1;
   014E D2 B1               844 	setb	_P3_1
                    0150    845 	C$main.c$139$2$2 ==.
                            846 ;	main.c:139: P3_2 = 1;
   0150 D2 B2               847 	setb	_P3_2
                    0152    848 	C$main.c$140$2$2 ==.
                            849 ;	main.c:140: P3_3 = 0;
   0152 C2 B3               850 	clr	_P3_3
                    0154    851 	C$main.c$141$1$1 ==.
                            852 ;	main.c:141: }
   0154                     853 00106$:
                    0154    854 	C$main.c$142$1$1 ==.
                    0154    855 	XG$write_segment$0$0 ==.
   0154 22                  856 	ret
                            857 ;------------------------------------------------------------
                            858 ;Allocation info for local variables in function 'get_digit'
                            859 ;------------------------------------------------------------
                            860 ;place                     Allocated with name '_get_digit_PARM_2'
                            861 ;value                     Allocated to registers r2 r3 
                            862 ;------------------------------------------------------------
                    0155    863 	G$get_digit$0$0 ==.
                    0155    864 	C$main.c$148$1$1 ==.
                            865 ;	main.c:148: unsigned char get_digit(unsigned int value, unsigned char place) {
                            866 ;	-----------------------------------------
                            867 ;	 function get_digit
                            868 ;	-----------------------------------------
   0155                     869 _get_digit:
   0155 AA 82               870 	mov	r2,dpl
   0157 AB 83               871 	mov	r3,dph
                    0159    872 	C$main.c$150$1$1 ==.
                            873 ;	main.c:150: if (place == 0) {
   0159 E5*14               874 	mov	a,_get_digit_PARM_2
   015B 70 0B               875 	jnz	00104$
                    015D    876 	C$main.c$151$2$2 ==.
                            877 ;	main.c:151: return (unsigned char)value % 10;
   015D 8A 04               878 	mov	ar4,r2
   015F 75 F0 0A            879 	mov	b,#0x0A
   0162 EC                  880 	mov	a,r4
   0163 84                  881 	div	ab
   0164 85 F0 82            882 	mov	dpl,b
   0167 22                  883 	ret
   0168                     884 00104$:
                    0168    885 	C$main.c$152$1$1 ==.
                            886 ;	main.c:152: } else if (place == 1) {
   0168 74 01               887 	mov	a,#0x01
   016A B5*14 18            888 	cjne	a,_get_digit_PARM_2,00105$
                    016D    889 	C$main.c$153$1$1 ==.
                            890 ;	main.c:153: return (unsigned char)(value / 10) % 10;
   016D 75*00 0A            891 	mov	__divuint_PARM_2,#0x0A
   0170 75*01 00            892 	mov	(__divuint_PARM_2 + 1),#0x00
   0173 8A 82               893 	mov	dpl,r2
   0175 8B 83               894 	mov	dph,r3
   0177 12s00r00            895 	lcall	__divuint
   017A AC 82               896 	mov	r4,dpl
   017C 75 F0 0A            897 	mov	b,#0x0A
   017F EC                  898 	mov	a,r4
   0180 84                  899 	div	ab
   0181 85 F0 82            900 	mov	dpl,b
   0184 22                  901 	ret
   0185                     902 00105$:
                    0185    903 	C$main.c$155$1$1 ==.
                            904 ;	main.c:155: return (unsigned char)(value / 100);
   0185 75*00 64            905 	mov	__divuint_PARM_2,#0x64
   0188 75*01 00            906 	mov	(__divuint_PARM_2 + 1),#0x00
   018B 8A 82               907 	mov	dpl,r2
   018D 8B 83               908 	mov	dph,r3
                    018F    909 	C$main.c$156$1$1 ==.
                    018F    910 	XG$get_digit$0$0 ==.
   018F 02s00r00            911 	ljmp	__divuint
                            912 ;------------------------------------------------------------
                            913 ;Allocation info for local variables in function 'display'
                            914 ;------------------------------------------------------------
                            915 ;value                     Allocated to registers r2 r3 
                            916 ;i                         Allocated to registers r4 
                            917 ;------------------------------------------------------------
                    0192    918 	G$display$0$0 ==.
                    0192    919 	C$main.c$163$1$1 ==.
                            920 ;	main.c:163: void display(unsigned int value) {
                            921 ;	-----------------------------------------
                            922 ;	 function display
                            923 ;	-----------------------------------------
   0192                     924 _display:
   0192 AA 82               925 	mov	r2,dpl
   0194 AB 83               926 	mov	r3,dph
                    0196    927 	C$main.c$168$1$1 ==.
                            928 ;	main.c:168: for (i = 0; i < NUMBER_OF_DIGITS; i++) {
   0196 7C 00               929 	mov	r4,#0x00
   0198                     930 00101$:
   0198 EC                  931 	mov	a,r4
   0199 B5*00 00            932 	cjne	a,_NUMBER_OF_DIGITS,00109$
   019C                     933 00109$:
   019C 50 24               934 	jnc	00105$
                    019E    935 	C$main.c$169$2$2 ==.
                            936 ;	main.c:169: write_segment(i, get_digit(value, i));
   019E 8C*14               937 	mov	_get_digit_PARM_2,r4
   01A0 8A 82               938 	mov	dpl,r2
   01A2 8B 83               939 	mov	dph,r3
   01A4 C0 02               940 	push	ar2
   01A6 C0 03               941 	push	ar3
   01A8 C0 04               942 	push	ar4
   01AA 12s01r55            943 	lcall	_get_digit
   01AD 85 82*13            944 	mov	_write_segment_PARM_2,dpl
   01B0 D0 04               945 	pop	ar4
   01B2 8C 82               946 	mov	dpl,r4
   01B4 C0 04               947 	push	ar4
   01B6 12s01r06            948 	lcall	_write_segment
   01B9 D0 04               949 	pop	ar4
   01BB D0 03               950 	pop	ar3
   01BD D0 02               951 	pop	ar2
                    01BF    952 	C$main.c$168$1$1 ==.
                            953 ;	main.c:168: for (i = 0; i < NUMBER_OF_DIGITS; i++) {
   01BF 0C                  954 	inc	r4
   01C0 80 D6               955 	sjmp	00101$
   01C2                     956 00105$:
                    01C2    957 	C$main.c$171$1$1 ==.
                    01C2    958 	XG$display$0$0 ==.
   01C2 22                  959 	ret
                            960 ;------------------------------------------------------------
                            961 ;Allocation info for local variables in function 'reset_display'
                            962 ;------------------------------------------------------------
                            963 ;------------------------------------------------------------
                    01C3    964 	G$reset_display$0$0 ==.
                    01C3    965 	C$main.c$176$1$1 ==.
                            966 ;	main.c:176: void reset_display() {
                            967 ;	-----------------------------------------
                            968 ;	 function reset_display
                            969 ;	-----------------------------------------
   01C3                     970 _reset_display:
                    01C3    971 	C$main.c$178$1$1 ==.
                            972 ;	main.c:178: write_segment(NUMBER_OF_DIGITS + 1,8);
   01C3 E5*00               973 	mov	a,_NUMBER_OF_DIGITS
   01C5 04                  974 	inc	a
   01C6 F5 82               975 	mov	dpl,a
   01C8 75*13 08            976 	mov	_write_segment_PARM_2,#0x08
                    01CB    977 	C$main.c$179$1$1 ==.
                    01CB    978 	XG$reset_display$0$0 ==.
   01CB 02s01r06            979 	ljmp	_write_segment
                            980 ;------------------------------------------------------------
                            981 ;Allocation info for local variables in function 'bounce_delay'
                            982 ;------------------------------------------------------------
                            983 ;------------------------------------------------------------
                    01CE    984 	G$bounce_delay$0$0 ==.
                    01CE    985 	C$main.c$184$1$1 ==.
                            986 ;	main.c:184: void bounce_delay() {
                            987 ;	-----------------------------------------
                            988 ;	 function bounce_delay
                            989 ;	-----------------------------------------
   01CE                     990 _bounce_delay:
                    01CE    991 	C$main.c$185$1$1 ==.
                            992 ;	main.c:185: for (cycle_delay = 0; cycle_delay < 10; cycle_delay++);
   01CE 75*0B 0A            993 	mov	_cycle_delay,#0x0A
   01D1 E4                  994 	clr	a
   01D2 F5*0C               995 	mov	(_cycle_delay + 1),a
   01D4 F5*0D               996 	mov	(_cycle_delay + 2),a
   01D6 F5*0E               997 	mov	(_cycle_delay + 3),a
   01D8                     998 00103$:
   01D8 15*0B               999 	dec	_cycle_delay
   01DA 74 FF              1000 	mov	a,#0xff
   01DC B5*0B 0C           1001 	cjne	a,_cycle_delay,00108$
   01DF 15*0C              1002 	dec	(_cycle_delay + 1)
   01E1 B5*0C 07           1003 	cjne	a,(_cycle_delay + 1),00108$
   01E4 15*0D              1004 	dec	(_cycle_delay + 2)
   01E6 B5*0D 02           1005 	cjne	a,(_cycle_delay + 2),00108$
   01E9 15*0E              1006 	dec	(_cycle_delay + 3)
   01EB                    1007 00108$:
   01EB E5*0B              1008 	mov	a,_cycle_delay
   01ED 45*0C              1009 	orl	a,(_cycle_delay + 1)
   01EF 45*0D              1010 	orl	a,(_cycle_delay + 2)
   01F1 45*0E              1011 	orl	a,(_cycle_delay + 3)
   01F3 70 E3              1012 	jnz	00103$
   01F5 75*0B 0A           1013 	mov	_cycle_delay,#0x0A
   01F8 E4                 1014 	clr	a
   01F9 F5*0C              1015 	mov	(_cycle_delay + 1),a
   01FB F5*0D              1016 	mov	(_cycle_delay + 2),a
   01FD F5*0E              1017 	mov	(_cycle_delay + 3),a
                    01FF   1018 	C$main.c$186$1$1 ==.
                    01FF   1019 	XG$bounce_delay$0$0 ==.
   01FF 22                 1020 	ret
                           1021 ;------------------------------------------------------------
                           1022 ;Allocation info for local variables in function 'check_start_press'
                           1023 ;------------------------------------------------------------
                           1024 ;------------------------------------------------------------
                    0200   1025 	G$check_start_press$0$0 ==.
                    0200   1026 	C$main.c$193$1$1 ==.
                           1027 ;	main.c:193: void check_start_press(){
                           1028 ;	-----------------------------------------
                           1029 ;	 function check_start_press
                           1030 ;	-----------------------------------------
   0200                    1031 _check_start_press:
                    0200   1032 	C$main.c$195$1$1 ==.
                           1033 ;	main.c:195: if (BUTTON_START == 1) {
   0200 A2 93              1034 	mov	c,_P1_3
   0202 82 96              1035 	anl	c,_P1_6
   0204 50 3F              1036 	jnc	00104$
                    0206   1037 	C$main.c$197$2$2 ==.
                           1038 ;	main.c:197: bounce_delay();
   0206 12s01rCE           1039 	lcall	_bounce_delay
                    0209   1040 	C$main.c$198$2$2 ==.
                           1041 ;	main.c:198: if (BUTTON_START == 1) {
   0209 A2 93              1042 	mov	c,_P1_3
   020B 82 96              1043 	anl	c,_P1_6
   020D 50 39              1044 	jnc	00110$
                    020F   1045 	C$main.c$199$3$3 ==.
                           1046 ;	main.c:199: display(1111); // for testing if btn was pressed
   020F 90 04 57           1047 	mov	dptr,#0x0457
   0212 12s01r92           1048 	lcall	_display
                    0215   1049 	C$main.c$206$3$3 ==.
                           1050 ;	main.c:206: for (cycle_delay = 0; cycle_delay < cycle_duration; cycle_delay++);
   0215 E4                 1051 	clr	a
   0216 F5*0B              1052 	mov	_cycle_delay,a
   0218 F5*0C              1053 	mov	(_cycle_delay + 1),a
   021A F5*0D              1054 	mov	(_cycle_delay + 2),a
   021C F5*0E              1055 	mov	(_cycle_delay + 3),a
   021E                    1056 00106$:
   021E C3                 1057 	clr	c
   021F E5*0B              1058 	mov	a,_cycle_delay
   0221 95*0F              1059 	subb	a,_cycle_duration
   0223 E5*0C              1060 	mov	a,(_cycle_delay + 1)
   0225 95*10              1061 	subb	a,(_cycle_duration + 1)
   0227 E5*0D              1062 	mov	a,(_cycle_delay + 2)
   0229 95*11              1063 	subb	a,(_cycle_duration + 2)
   022B E5*0E              1064 	mov	a,(_cycle_delay + 3)
   022D 95*12              1065 	subb	a,(_cycle_duration + 3)
   022F 50 17              1066 	jnc	00110$
   0231 05*0B              1067 	inc	_cycle_delay
   0233 E4                 1068 	clr	a
   0234 B5*0B E7           1069 	cjne	a,_cycle_delay,00106$
   0237 05*0C              1070 	inc	(_cycle_delay + 1)
   0239 B5*0C E2           1071 	cjne	a,(_cycle_delay + 1),00106$
   023C 05*0D              1072 	inc	(_cycle_delay + 2)
   023E B5*0D DD           1073 	cjne	a,(_cycle_delay + 2),00106$
   0241 05*0E              1074 	inc	(_cycle_delay + 3)
   0243 80 D9              1075 	sjmp	00106$
   0245                    1076 00104$:
                    0245   1077 	C$main.c$210$2$4 ==.
                           1078 ;	main.c:210: reset_display();
                    0245   1079 	C$main.c$212$1$1 ==.
                    0245   1080 	XG$check_start_press$0$0 ==.
   0245 02s01rC3           1081 	ljmp	_reset_display
   0248                    1082 00110$:
   0248 22                 1083 	ret
                           1084 ;------------------------------------------------------------
                           1085 ;Allocation info for local variables in function 'init'
                           1086 ;------------------------------------------------------------
                           1087 ;------------------------------------------------------------
                    0249   1088 	G$init$0$0 ==.
                    0249   1089 	C$main.c$216$1$1 ==.
                           1090 ;	main.c:216: void init(void) {
                           1091 ;	-----------------------------------------
                           1092 ;	 function init
                           1093 ;	-----------------------------------------
   0249                    1094 _init:
                    0249   1095 	C$main.c$217$1$1 ==.
                           1096 ;	main.c:217: KEYPAD_PORT = 1; //#E
   0249 75 90 01           1097 	mov	_P1,#0x01
                    024C   1098 	C$main.c$220$1$1 ==.
                           1099 ;	main.c:220: cycle_duration = 1; // The artificial time delay is X cycles long
   024C 75*0F 01           1100 	mov	_cycle_duration,#0x01
   024F E4                 1101 	clr	a
   0250 F5*10              1102 	mov	(_cycle_duration + 1),a
   0252 F5*11              1103 	mov	(_cycle_duration + 2),a
   0254 F5*12              1104 	mov	(_cycle_duration + 3),a
                    0256   1105 	C$main.c$221$1$1 ==.
                    0256   1106 	XG$init$0$0 ==.
   0256 22                 1107 	ret
                           1108 ;------------------------------------------------------------
                           1109 ;Allocation info for local variables in function 'main'
                           1110 ;------------------------------------------------------------
                           1111 ;------------------------------------------------------------
                    0257   1112 	G$main$0$0 ==.
                    0257   1113 	C$main.c$225$1$1 ==.
                           1114 ;	main.c:225: void main (void) {
                           1115 ;	-----------------------------------------
                           1116 ;	 function main
                           1117 ;	-----------------------------------------
   0257                    1118 _main:
                    0257   1119 	C$main.c$226$1$1 ==.
                           1120 ;	main.c:226: init(); // Initialize
   0257 12s02r49           1121 	lcall	_init
                    025A   1122 	C$main.c$228$1$1 ==.
                           1123 ;	main.c:228: while (1) {
   025A                    1124 00102$:
                    025A   1125 	C$main.c$230$2$2 ==.
                           1126 ;	main.c:230: check_start_press();
   025A 12s02r00           1127 	lcall	_check_start_press
                    025D   1128 	C$main.c$232$1$1 ==.
                    025D   1129 	XG$main$0$0 ==.
   025D 80 FB              1130 	sjmp	00102$
                           1131 	.area CSEG    (CODE)
                           1132 	.area CONST   (CODE)
                           1133 	.area XINIT   (CODE)
                           1134 	.area CABS    (ABS,CODE)
